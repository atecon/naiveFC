function strings get_supported_seas_methods (void)
    /* List all seasonal supported methods here. */
    
    return defarray("smeanFC", "smedianFC", "snaiveFC", "snaivedriftFC")
end function

function strings get_supported_nonseas_methods (void)
    /* List all non-seasonal supported methods here. */
    
    return defarray("meanFC", "medianFC", "rwFC", "rwdriftFC", "ar1FC", \
      "ar1trendFC", "avgFC")
end function

function scalar data_has_seasonality (void)
    /* Flag seasonality of data set */

    return ($pd>1) ? 1 : 0
end function

function matrix fc_interval_width (const matrix fc_sd "Std. error of forecast",
                                   const scalar level[0.001:0.999:] "confidence level")
    /* Compute width for a given condifdence level assuming standard normal. */

    return fc_sd * critical(z, (1-level)/2)
end function


function bundle point_fc_and_factor_as_arrays (const matrices fc_and_sd,
                                               bundle *self)
    /* Using each model's point forecast and standard error, compute
    the forecast interval assuming standard normal. */

    bundle bout = null

    scalar m = nelem(fc_and_sd)
    matrices point_forecasts = array(m)
    matrices factors = array(m)

    loop i=1..m -q
        point_forecasts[i] = fc_and_sd[i][,1]
        factors[i] = fc_interval_width(fc_and_sd[i][,1], self.level)
    endloop

    bout.point_forecasts = point_forecasts
    bout.factors = factors

    return bout
end function


function void get_point_low_up_bound_arrays (bundle *bout, bundle *self)
/* Generate for each model based on respective point forecasts and
    estimated standard derrors, arrays holding the interval forecasts. */

    if !inbundle(bout, "point_forecasts")
        funcerr "Could not find item 'point_forecasts' in bundle"
    endif
    if !inbundle(bout, "factors")
        funcerr "Could not find item 'factors' in bundle"
    endif

    scalar n = nelem(bout.point_forecasts)
    if n != nelem(bout.factors)
        funcerr "Number of matrices does not equal.
    endif

    matrices self.forecasts_point = array(n)
    matrices self.forecasts_lower_bound = array(n)
    matrices self.forecasts_upper_bound = array(n)

    loop i=1..n -q
        self.forecasts_point[i] = bout.point_forecasts[i]
        self.forecasts_lower_bound[i] = bout.point_forecasts[i] - bout.factors[i]
        self.forecasts_upper_bound[i] = bout.point_forecasts[i] + bout.factors[i]
    endloop

end function


function strings gen_column_names (bundle *self)
    /* Construct column names */

    strings s = defarray(self.which)
    if tolower(self.which) != "avgfc"
        s += sprintf("Lo (%.1f)", (1-self.level)/2*100)
        s += sprintf("Up (%.1f)", (1-(1-self.level)/2)*100)
    endif

    return s
end function


function strings array_of_horizon_labels (const int horizon)
    /* Construct string array for indicating the forecast horizons. */

    strings r = array(horizon)    
    loop i=1..horizon -q
        r[i] = sprintf(" h=%d", i)
    endloop

    return r
end function

function strings array_of_forecast_dates (bundle *self)
    /* Construct date strings refering to the date for which a the
    h-step ahead forecast was made for. For 'static' forecasts only. */

    strings r = array(self.horizon)
    # Here we explicitly consider the case when the last obs are missings
    matrix date = {$obsdate}[1+obsnum(self.t2_label):]

    loop i=1..self.horizon -q
        string sdate = sprintf("%d", date[i])
        if $pd==1
            r[i] = sprintf("%s", substr(sdate,1,4))
        elif $pd==4
            r[i] = sprintf("%s:%s", substr(sdate,1,4),
              substr(sdate,5,6))
        else
            r[i] = sprintf("%s-%s-%s", substr(sdate,1,4),
              substr(sdate,5,6), substr(sdate,7,8))
        endif
    endloop

    return r
end function

function strings array_of_condition_dates (bundle *self)
    /* Construct date strings refering to the date based on which a
    forecasting model was estimated. */

    if self.type_moving_window == "static"
        strings dates = array(1)		# for 'static' case, only on a single date is conditioned
    else
        strings dates = array(self.n_folds)
    endif
    
    # Here we explicitly consider the case when the last obs are missings
    # TODO: Check dates for correctness!
    scalar first_condition_date = obsnum(self.t1_forecast_date) - 1
    if self.type_moving_window == "static"
        #scalar first_condition_date = obsnum(self.t2_label)
        scalar last_condition_date = first_condition_date
    else
        scalar last_condition_date = first_condition_date + self.n_folds - 1	# TODO: -1 ???
    endif
    matrix conditioning_dates = {$obsdate}[first_condition_date:last_condition_date]

    strings r = array(rows(conditioning_dates))
    
    # TODO: Consolidate with loop in array_of_forecast_dates()
    loop i=1..rows(conditioning_dates) -q
        string sdate = sprintf("%d", conditioning_dates[i])
        
        if $pd==1
            r[i] = sprintf("%s", substr(sdate,1,4))
        elif $pd==4
            r[i] = sprintf("%s:%s", substr(sdate,1,4),
              substr(sdate,5,6))
        else
            r[i] = sprintf("%s-%s-%s", substr(sdate,1,4),
              substr(sdate,5,6), substr(sdate,7,8))
        endif
    endloop

    return r
end function


function void print_no_bootstrap_support (void)
    funcerr "Bootstrap confidence intervals are not supported, yet"
end function


function bundle get_default_values (const series y)
    /* Set default values */

    bundle self = null
    list self.xlist = null
    scalar self.horizon = 10				# maximum forecast horizon
    scalar self.level = 0.9					# probability level for forecast interval
    scalar self.fan = 0						# plot fan chart  (not supported yet)
    scalar self.nboot = 0					# no. of bootstrap replications  (not supported yet)
    scalar self.blength = 4					# Block length bootstrap  (not supported yet)
    scalar self.is_seas = data_has_seasonality()
    scalar self.verbose = 1

    # For get_moving_window_forecasts()
    string self.type_moving_window = "static" 			# "static", "rolling" or "recursive"
    scalar self.window_length = ceil(0.25*nobs(y))		# default window length

    # For naivePlot()
    string self.title = ""
    string self.ylab = ""
    string self.xlab = ""
    string self.filename = "display"

    return self
end function

function series get_period_series (const string method)
    catch series period = $obsmicro
    if $error
        series period = $obsminor
    endif

    return period
end function


function void get_static_forecasts (bundle *self)
    /* This function is called by naiveFC() and for 'static' forecasts only. */

    matrices fc_and_sd = call_method(&self)
    bundle bout = point_fc_and_factor_as_arrays(fc_and_sd, &self)
    get_point_low_up_bound_arrays(&bout, &self)
end function


function matrices call_method (bundle *self)
/* Wrapper for calling method. Returns p-dimension array where
   each matrix is of size h by 2 holding point forecasts and forecast
    standard errors. */

    # Returned array includes m matrices. Each matrix is of dimension h by 2 (point~sderr)
    if tolower(self.which) != "avgfc"	# m=1
        matrices fc_and_sd = defarray(forecast_and_get_fc_sd(&self, self.which))	# 1-dim array incl. single h by 2 matrix
    else								# currently m=10 incl. avg. forecast
        matrices fc_and_sd = avg_forecast_and_get_fc_sd(&self)	# function already transforms into array
    endif

    return fc_and_sd
end function


function matrix forecast_and_get_fc_sd (bundle *self, const string method)
    /* Compute point forecast and forecast standard errors. */

    matrix fc_and_sd_matrix = zeros(self.horizon, 2) * NA
    list xlist = null

    if method=="smeanFC" || method=="smedianFC"
        series period = get_period_series(method)
        xlist += dummify(period)
    endif

    if method=="ar1trendFC" && (inbundle(self, "w_trend") && self.w_trend)
        genr time
    endif

    # Seelect sample comprising both training and test set
    if self.type_moving_window=="static"
        catch smpl obsnum(self.t1_label) obsnum(self.t2_label)
    elif self.type_moving_window=="rolling" || self.type_moving_window=="recursive"
        # Nutzer setzt z.B. window_length=500
        # Vektor von y aus CvDataSplitter ist 500+horizon Zeilen lang
        # Hier schr채nken wir auf T=500 um zu trainieren und die 체brigen horizon
        # Zeilen zu forecasten.
#        catch smpl 1 (1+self.window_length-1) 		# before: smpl ; $t2
#        eval $t1
#        eval $t2
    endif
    if $error
       funcerr "Check your sample and window size."
    endif
    
    *** HIER WEITERMACHEN ***
     Kl채re welches sample hier eingeht
     Ich will window_length Beobachtungen f d Trainingsset
     und zus채tzlich horizon Beobachtungen f d Testset

    # Set target variable and xlist
    series y = self.y					# has window_length + horizon observations
#    print y -o
#    stop
    
    if method != "rwFC" || method != "rwdriftFC"
        list xlist += const
    endif
    list xlist += self.xlist
    
    # Set training set
    if self.type_moving_window=="rolling" || self.type_moving_window=="recursive"
        catch smpl 1 self.window_length
        eval self.window_length
        eval $t1
        eval $t2
                
        #catch smpl ; -self.horizon
    endif

    # Estimation
    scalar dynamic_fc = 0

    if method=="meanFC"
        catch ols y xlist #--quiet

    elif method=="medianFC"
        catch quantreg 0.5 y xlist --quiet

    elif method=="smeanFC"
        catch ols y xlist --quiet

    elif method=="smedianFC"
        catch quantreg 0.5 y xlist --quiet

    elif method=="snaiveFC" || method=="snaivedriftFC"
        dynamic_fc++
        string arima_opt = (method=="snaiveFC") ? "--nc" : ""
        catch arima 0 0 0 ; 0 1 0 ; y xlist @arima_opt --quiet

    elif method=="rwFC" || method=="rwdriftFC"
        dynamic_fc++
        string arima_opt = (method=="rwFC") ? "--nc" : ""
        catch arima 0 1 0 ; y xlist @arima_opt --quiet

    elif method=="ar1FC" || method=="ar1trendFC"
        dynamic_fc++
        # setup list of regressors
        list xlist += y(-1)
        if inbundle(self, "w_trend")
            xlist += trend
        endif
        catch ols y xlist --quiet
    endif

    scalar model_error = $error

    if model_error
        printf "\nError: Model estimation failed. \n\
          Forecast values are set to NA for the current sample.\n"
    else
        if dynamic_fc == 0
            fcast ($t2+1) ($t2+self.horizon) --static #--quiet
        else
            fcast ($t2+1) ($t2+self.horizon) --dynamic #--quiet
        endif
    endif

    if self.type_moving_window=="static"
        gen_t1_forecast_date($t2, &self)			# adds to self
        gen_t2_forecast_date($t2, &self)			# adds to self
    endif

    if !model_error
        fc_and_sd_matrix = $fcast ~ $fcse
    endif

    return fc_and_sd_matrix
end function


function void gen_t1_forecast_date (const int t2, bundle *self)
    /* Return the date for which the first 1-step ahead forecast is made for. */
        string self.t1_forecast_date = obslabel(t2+1)
        string self.t2_forecast_date = obslabel(t2+self.horizon)
end function
    
function void gen_t2_forecast_date (const int t2, bundle *self)
    /* Return the date for which the last h-step ahead forecast is made for. */
        string self.t2_forecast_date = obslabel(t2+self.horizon)
end function


# TODO: Will be part of extra.gfn in v0.51
function matrix strpos (const strings S "Array of strings",
                        const string str "String being searched for in S",
                        const bool print_warnings[1] "Print eventual warnings")
    # Returns the positional entries of string in S in a column vector
    # if S contains string, 0 otherwise.

    if nelem(S) == 0
        if print_warnings
            printf "Warning: String array '%s' is empty.\n", argname(S)
        endif
        return {0}
    endif

    matrix ret = {}
    loop i=1..nelem(S) -q
        if S[i] == str
            ret |= $i
        endif
    endloop

    if rows(ret) > 0
        return ret
    else
        return {0}
    endif
end function


function void do_initial_checks (bundle *self)
    /* Helper function perfoming some initial checks */

    strings methods = get_supported_nonseas_methods()
    strings seas_methods = get_supported_seas_methods()

    # Check whether called method exists
    if sum(strpos(methods, self.which)) == 0 && sum(strpos(seas_methods, self.which)) == 0
        funcerr "The forecasting method you selected does not exist."
    endif

    if self.is_seas==0 && sum(strpos(seas_methods, self.which)) > 0
        funcerr "The method you requested is not available for non-seasonal data."
    endif

    if self.window_length < $pd
        printf "\nError: Problem with current periodicity.\n"
        printf "Window size = %d\n", self.window_length
        printf "Periodicity = %d\n", $pd
        funcerr "The size of the moving window cannot be smaller than the underlying periodicity."
    endif

    if self.nboot>0
        print_no_bootstrap_support()
    endif

    if (self.type_moving_window=="rolling" || self.type_moving_window=="recursive") && self.which=="avgFC"
        printf "Error: Automatic forecast averaging ('avgfc') is currently not compatible\n"
        printf "with moving forecasts.\n"
        funcerr "Re-specify."
    endif
end function


function bundle naiveFC (const series y,
                         string which "Select forecasting method",
                         bundle opts[null] "Bundle incl. optional parameters")

    /* Main package function */

    # Set up the bundle
    bundle self = get_default_values(y)
    if exists(opts)
        # TODO: Add a check on whether items in bundle opts actually exist in self
        self = opts + self			# override defaults
    endif
    self.which = which
    self.name_endo = argname(y)

    # Check whether method is applicable
    do_initial_checks(&self)

    # Drop missings + determine number of valid observations
    drop_missing_values(y, &self)

    # Add obs for forecasting
    self.obs_added = nobs_to_add_to_dataset(y, &self)
    if self.obs_added>0
        dataset addobs self.obs_added
    endif

    series self.y = y		# update as additional observations were attached

    do_naive_forecasting(&self)
   
    /* Debugging only
    print self
    eval self.forecasts_point
    eval self.forecasts_point[1]
    stop
    */

    if self.verbose
    #    summarize_naive_fc_results(&self)
    endif

    # Drop some elements from self
    delete self.fan
    delete self.blength
    delete self.nboot
    if inbundle(self,"obs_season")
        delete self.obs_season
    endif

    return self
end function


function void do_naive_forecasting (bundle *self)
/* Wrapper function actually calling static or
    moving-window procedures. */

    if self.type_moving_window == "static"
        get_static_forecasts(&self)
    else
        catch include CvDataSplitter.gfn		# load another external package
        if !$error
            printf "\nInfo: Necessary package 'CvDataSplitter' succesfully loaded.\n"
        endif
        get_moving_window_forecasts(&self)
    endif

    attach_column_labels(&self)
    attach_row_labels(&self)    
end function


function void attach_row_labels (bundle *self)
    /* Add date strings as row labels for 'static' forecasts,
      or indicate the forecast horizon for moving-window
      forecasts. */

    if self.type_moving_window == "static"
        strings row_labels = array_of_forecast_dates(&self)
    else
        strings row_labels = array_of_horizon_labels(self.horizon)
    endif
    
    loop i=1..nelem(self.forecasts_point) -q
        rnameset(self.forecasts_point[i], row_labels)
        rnameset(self.forecasts_lower_bound[i], row_labels)
        rnameset(self.forecasts_upper_bound[i], row_labels)
    endloop
end function


function void attach_column_labels (bundle *self)
    /* Add date strings as column labels for indicating the date on
    which the estimates are conditioned on. */
    
    strings conditioning_dates = array_of_condition_dates(&self)
    
    loop i=1..nelem(self.forecasts_point) -q
        cnameset(self.forecasts_point[i], conditioning_dates)
        cnameset(self.forecasts_lower_bound[i], conditioning_dates)
        cnameset(self.forecasts_upper_bound[i], conditioning_dates)
    endloop    
end function


function void summarize_naive_fc_results (bundle *self)
    /* Print summarising information */
    printf "****************************************************\n"
    printf "\t\tNaive Forecasting Method\n"
    printf "\nEndogenous: \t\t\t\t%s\n", self.name_endo
    printf "Number of additional exogenous: \t%d\n", nelem(self.xlist)
    printf "Forecasting method: \t\t\t%s\n", self.which
    printf "Start valid data set: \t\t\t%s\n", self.t1_label
    printf "End valid data set: \t\t\t%s\n", self.t2_label
    printf "Number of observations: \t\t%d\n", obsnum(self.t2_label)-obsnum(self.t1_label)
    printf "Forecast horizon: \t\t\t%d\n", self.horizon
    if self.type_moving_window=="static"
        printf "First observation forecasted: \t\t%s\n", obslabel(obsnum(self.t2_label)+1)
        if self.which!="avgFC"
            printf "Width forecast interval: \t\t%d pct.\n", self.level*100
        endif
    else
        printf "Moving window length: \t\t\t%d\n", self.window_length
        printf "Number of %s forecasts: \t\t%d\n", self.type_moving_window, rows(self.fc)
        printf "First observation forecasted (h=1): \t%s\n", obslabel(self.initfc)
    endif
    printf "****************************************************\n"
    printf "\n"
end function


function scalar nobs_to_add_to_dataset (const list y, bundle *self)
    /* Determine the number of additional observations to add to the dataset. */

    smpl y --contiguous
    t2_new = $t2				# don't consider eventual missings in the data passed to naiveFC()

    return self.horizon - ($tmax-t2_new)
end function


function void drop_missing_values (const series y, bundle *self)
    /* Drop missing values + construct a contiguous data set. */

    self.T_all = $nobs  # no. of obs of the original dataset passed, may incl. missings

    if nelem(self.xlist) > 0
        list xlist = self.xlist
        smpl y --contiguous
        scalar t2_y = $t2
        smpl full
        smpl xlist --contiguous
        scalar t2_xlist = $t2
        scalar self.tdiff_xlist_y = t2_xlist - t2_y

        if self.tdiff_xlist_y>0 && self.tdiff_xlist_y<self.horizon
            printf "\nError: The last valid observation of series %s is %s.\n", self.name_endo, obslabel(t2_y)
            printf "You requested a %d-step ahead sequence of forecasts.\n", self.horizon
            printf "The last valid observation of the contiguous sample for the additional\n\
              exogenous regressors is %s.\n", obslabel(t2_xlist)
            printf "Thus, it is impossible to compute the requested h-steap ahead\n\
              sequence of forecasts.\n"
            printf "Either reduce the forecast horizon to h=%d or add future information\n\
              for your 'xlist' variables.\n", (self.tdiff_xlist_y)
            funcerr ""

        elif self.tdiff_xlist_y<=0
            printf "\nError: The 'xlist' variables include no valid future observations\n\
              but only missings.\n"
            printf "Last valid of additional exogenous regressors is %s\n", obslabel(t2_xlist)
            funcerr "Re-specify."
        endif

        smpl full
    endif

    smpl y --contiguous
    self.t1_label = obslabel($t1)
    self.t2_label = obslabel($t2)
    self.T = $nobs		# no. of valid obs before adding obs. for forecasting purpose

    if self.T<self.T_all && !self.verbose
        printf "\nWarning: The time-series sample has been restricted\n"
        printf "due to %d missing values in series %s.\n", (self.T_all-$nobs), self.name_endo
        printf "Information on the new contiguous set for series %s:\n", , self.name_endo
        printf "Start date: %s\n", obslabel($t1)
        printf "End date: %s\n", obslabel($t2)
        printf "\n"
    endif
end function


function matrices do_avgfcs_and_get_fc_sd_array (const strings methods, bundle *self)
/* Compute forecasts for each method. For each mezthod we obtain a matrix
    of size h by 2 holding point forecasts and associated standard errors. */

    scalar m = nelem(methods)
    matrices fc_and_sd = array(m)

    loop i=1..m -q
        fc_and_sd[i] = forecast_and_get_fc_sd(&self, methods[i])
    endloop

    return fc_and_sd
end function


function strings drop_string_from_array (const strings S, const string drop_str)
    /* Drop a specific string from string array. String yay occur multiple times. */

    strings ret = null
    loop i=1..nelem(S) -q
        if S[i] != drop_str
            ret += S[i]
        endif
    endloop

    return ret
end function


function matrices avg_forecast_and_get_fc_sd (bundle *self)
/* Compute forecasts using different methods supported, and return array of point
    forecasts and associated standard errors. */

    # Models for both seasonal and non-seasonal frequencies
    strings self.methods_used = drop_string_from_array(get_supported_nonseas_methods(), "avgFC")
    if self.is_seas
        strings methods_seasonals = get_supported_seas_methods()
        self.methods_used += methods_seasonals
    endif

    return do_avgfcs_and_get_fc_sd_array(self.methods_used, &self)
end function


function bundle get_mean_fc_and_mean_sd (const matrices fc_and_sd)
    /* */

    scalar n = nelem(fc_and_sd)
    scalar h = rows(fc_and_sd[1])
    matrix point_fc_avg = NA * zeros(h, n)	# avg. point forecast across all models
    matrix sd_fc_avg = NA * zeros(h, n)		# avg. std. error of forecasts across all models

    loop i=1..n -q			# TODO: Future drill() may replace this
        point_fc_avg[,i] = fc_and_sd[i][,1]
        sd_fc[,i] = fc_and_sd[i][,2]
    endloop

    return defbundle("fc_point_avg", meanr(point_fc_avg), "fc_sd_avg", meanr(sd_fc_avg))
end function


function void get_moving_window_forecasts (bundle *self)
/* This function estimates the point forecasts either in (i) a rolling or
    (ii) a recursive manner and stores sequences of interval forecasts. */

    if $nobs < self.window_length
        printf "\nError: The window size you selected (wsize=%d) exceeds the\n\
          number of valid observations.\n", self.window_length
        funcerr "Re-specify."
    endif

    series y = self.y
    
    # Set data splitter using the valid observation set w.o. observations
    # additionally added for forecasting
    smpl obsnum(self.t1_label) obsnum(self.t2_label)

    bundle cv = null					# Tried to put this into a bundle, but git issues with index series
    list cv.X = 	y					# CvDataSplitter() expects a list
    string cv.cv_type = (self.type_moving_window=="rolling") ? "rolwin" : "recwin"
    scalar cv.win_size = self.window_length + self.horizon		# The last self.horizon rows are reserved for the OoS evaluation
    CvDataSplitter(&cv)


    # As CvDataSplitter() doesn't consider the very last obs in
    # the final training set for 'rolwin' and 'recwin', this must be added.
    cv.X_train += cv.X_train[cv.n_folds] | ({$t2, y[$t2]})
    cv.n_folds++
    self.n_folds = cv.n_folds
    
#    eval cv.n_folds							# 1608
#    eval rows(cv.X_train[cv.n_folds])		# 511
#    eval cv.X_train[cv.n_folds]
#    stop

    /*
    if rows(cv.X_train[1]) != self.window_length + self.horizon			# FIXME: Clarify this
        printf "\nError: The length of cv.X_train does not equal the length (T + horizon).\n"
    endif
    */

    /*	For debugging only
       matrices X_train = cv.X_train
       loop i=1..cv.n_folds -q
       eval X_train[i]
       if i==cv.n_folds
       stop
       endif
       endloop
    */

    # Loop over training sets, run estimation and retrieve interval forecasts
    # returns n_folds-dimensional array comprising h by 2 (point~sderr) matrices.
    matrices fc_and_sd_from_all_cv = get_cv_fc_and_sd_array(&cv, &self)
    bundle bout = point_fc_and_factor_as_arrays(fc_and_sd_from_all_cv, &self)	# stuff stored in an array in bout
    bout
    stop

    # Retrieve moving-window point_forecasts from array,
    # and compute and get associated intervals.
    matrices pt_lb_up = ret_movwin_point_lb_up_matrices(&bout, &self)    

    # --> For the 'static' case, point, lower and upper bound results
    # are stored in separate matrix arrays, as multiple models can be
    # estimated 'at once' in case the avgFC is called.
    # For compatibility reasons, we do the same here.
    matrices self.forecasts_point = defarray(pt_lb_up[1])		# rows: horizon, cols: date based on which h-steap ahead forecast is made for
    matrices self.forecasts_lower_bound = defarray(pt_lb_up[2])
    matrices self.forecasts_upper_bound = defarray(pt_lb_up[3])
    
end function


function matrices ret_movwin_point_lb_up_matrices (bundle *bout,
                                                   bundle *self)
    /* Retrieve miving-window point_forecasts from array,
    and compute and get associated intervals. */
    matrices out = array(3)

    out[1] = flatten(bout.point_forecasts)		# rows: horizon, cols: sample period
    matrices get_movwin_low_up_matrices = get_movwin_low_up_matrices(out[1], \
      flatten(bout.factors))
    out[2] = get_movwin_low_up_matrices[1]
    out[3] = get_movwin_low_up_matrices[2]

    return out
end function


function matrices get_cv_fc_and_sd_array (bundle *cv, bundle *self)
    /* Loop over training sets, run estimation and retrieve
    interval forecasts. */
    
    matrices fc_and_sd_from_all_cv = array(cv.n_folds)
    
    loop lwin=1..cv.n_folds -q
        mat = cv.X_train[lwin]
        # Before we had smpl minc(mat[,1]) (maxc(mat[,1]))		# time index of the training set
        smpl minc(mat[,1]) (maxc(mat[,1])+self.horizon)			# time index of the training set

        if lwin == 1
            # Note: As the series for cross-validation holds "window_length+horizon" observations, we need to
            # subtract "horizon" here.
            gen_t1_forecast_date(1+$t2-self.horizon, &self)	# Date for which the 1st 1-step ahead forecast is made for
            # TODO: or simply "gen_t1_forecast_date($t1+self.window_length-1, &self) ??
        elif lwin == cv.n_folds
            gen_t2_forecast_date($t2, &self)				# Date for which the last h-step ahead forecast is made for
        endif
        
        fc_and_sd_from_all_cv[lwin] = call_method(&self)[1]
    endloop

    return fc_and_sd_from_all_cv
end function




function matrices get_movwin_low_up_matrices (const matrix point_forecasts,
                                              const matrix factors)
    /* Compute for all horizons and moving windows the intervals
    for the forecast. */

    matrices lower_and_upper = array(2)
    matrix lower_and_upper[1] = point_forecasts .- factors
    matrix lower_and_upper[2] = point_forecasts .+ factors

    return lower_and_upper
end function



function void naivePlot (bundle *self "Bundle returned from naiveFC()")
    /* Function for plotting actual and forecast values over time. */

    string out = self.filename

    # No. of pre-forecast obs. to plot - default 25pct. of total obs.
    scalar preobs_fc = !inbundle(self,"preobs_fc") ? int(0.25*self.T) : self.preobs_fc

    # Augment the dataset
    if self.obs_added>0
        dataset addobs self.obs_added
    endif
    # Note, eventual missings at the beginning of the data passed to naiveFC() aren't considered.
    smpl obsnum(self.t1_label) $t2				# restrict back
    series y = self.y
    delete self.y


    # Set up the fcmat matrix holding results
    if self.type_moving_window=="static"
        matrix fcmat = zeros(self.T, cols(self.fc))		# length equal to no, of obs. of the non-augmented sample
        fcmat = (fcmat.=0) ? NA : fcmat
        fcmat |= self.fc							# concatenate forecasts
    else
        matrix fcmat = self.fc
    endif

    # Prepare lists for plotting
    setinfo y --graph-name="Actuals"
    list lplot = y

    if self.type_moving_window!="static"						# rolling/ recursive window
        # Initialization
        scalar start = self.initfc-1
        smpl start start
        # Loop over diff. training sets; each produces h-step ahead forecasts
        loop i=1..rows(self.fc) -q
            start++
            smpl start (start+self.horizon-1)
            series fc_$i = fcmat[i,]
            str = sprintf("TrainSet=%d", $i)
            setinfo fc_$i --graph-name="@str"
            lplot += fc_$i
        endloop

    elif self.type_moving_window=="static"
        self.initfc = self.T+1

        loop i=1..cols(self.fc) -q
            series fc_$i = fcmat[,i]

            if self.which=="avgFC"
                if i!=2
                    str = sprintf("%s", self.method_names[i])
                    setinfo fc_$i --graph-name="@str"
                endif
            else
                string meth = self.which
                setinfo fc_$i --graph-name="@meth"	#"Point-Fc"
                if cols(self.fc)==3
                    if i==2
                        string s = sprintf("%.1f", (1-self.level)/2*100 )
                        setinfo fc_$i --graph-name="@s"
                    elif i==3
                        string s = sprintf("%.1f", (1-(1-self.level)/2)*100 )
                        setinfo fc_$i --graph-name="@s"
                    endif
                endif
            endif
            lplot += fc_$i
            if self.which=="avgFC" && i==2
                lplot -= fc_$i		# drop cross-sectional std. statistics
            endif
        endloop
    endif

    # Setup and plot
    #===============
    # incl. some pre-forecast periods obs. for plotting
    smpl xmax((self.initfc-preobs_fc),1) $tmax
    # y-range
    scalar mini = min(min(lplot))
    scalar maxi = max(max(lplot))
    scalar ylo = mini-0.05*abs(mini)
    scalar yup = maxi+0.05*abs(maxi)
    # TODO: lplot may become A VERY long list -- think about a restriction showing
    # only the k last forecasts


    if cols(self.fc)!=3
        plot lplot
            options with-lp time-series single-yaxis
            literal set linetype 1 lc rgb "black" lw 1 pt -1
            literal set linetype 2 lc rgb "red" lw 1.25 pt 2 ps 0.5
            literal set linetype 3 lc rgb "blue" lw 1#.25
            literal set linetype 4 lc rgb "black" lw 1#.25
            literal set linetype 5 lc rgb "grey" lw 1#.25
            literal set linetype 6 lc rgb "violet" lw 1#.25 #pt 3 ps 0.5
            literal set linetype 7 lc rgb "brown" lw 1#.25 #pt 4 ps 0.5
            literal set linetype 8 lc rgb "yellow" lw 1#.25 #pt 5 ps 0.5
            literal set linetype 9 lc rgb "red" lw 1#.25 #pt 1 ps 0.5
            literal set linetype 10 lc rgb "green" lw 1#.25
            literal set linetype 10 lc rgb "black" lw 1#.25
            literal set key left bottom below
            #literal set key inside left bottom
            #put the border more to the background by applying it
            # only on the left and bottom part and put it and the tics in gray
            literal set style line 11 lc rgb "#808080" lt 1
            literal set border 3 back ls 11			# get rid of upper + left border
            literal set tics nomirror
            #add a slight grid to make it easier to follow the exact position of the curves
            literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
            literal set grid back ls 12
            printf "set yrange[%g:%g]", ylo, yup
            printf "set ylabel \"%s\"", self.ylab
            printf "set xlabel \"%s\"", self.xlab
            printf "set title \"%s\"", self.title
        end plot --output="@out"

    else
        plot lplot
            options with-lines time-series single-yaxis
            literal set linetype 1 lc rgb "black" lw 1 pt -1
            literal set linetype 2 lc rgb "red" lw 1.25 pt 2 ps 0.5
            literal set linetype 3 lc rgb "blue" lw 1.25
            literal set linetype 4 lc rgb "blue" lw 1.25
            literal set key left bottom below
            #literal set key inside left bottom
            #put the border more to the background by applying it
            # only on the left and bottom part and put it and the tics in gray
            literal set style line 11 lc rgb "#808080" lt 1
            literal set border 3 back ls 11			# get rid of upper + left border
            literal set tics nomirror
            #add a slight grid to make it easier to follow the exact position of the curves
            literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
            literal set grid back ls 12
            printf "set yrange[%g:%g]", ylo, yup
            printf "set ylabel \"%s\"", self.ylab
            printf "set xlabel \"%s\"", self.xlab
            printf "set title \"%s\"", self.title
        end plot --output="@out"
    endif
end function


function matrix GUI_naiveFC (const series y "Dependent variable",
                             const list xlist[null] "Additional exogenous (future values must be known)",
      int which[1:11:1] "Model type" {"meanFC", "medianFC", "rwFC", "rwdriftFC", "ar1FC", "ar1trendFC", "smeanFC", "smedianFC", "snaiveFC", "snaivedriftFC", "avgFC"},
      int h[1::10] "Forecast horizon",
      bool Plot[1] "Plot forecast")
    /* Helper function for GUI access. */

    # map integer value to string
    strings methods = get_supported_nonseas_methods()

    bundle opts = null
    bundle self = null
    opts.h = h
    opts.xlist = xlist
    self = naiveFC(y, methods[which], opts)

    # output
    printf "%12.4f\n", self.fc
    if Plot
        naivePlot(&self)
    endif

    return self.fc
end function

