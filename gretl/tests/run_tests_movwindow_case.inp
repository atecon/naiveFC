set verbose off
clear


include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force

include CvDataSplitter.gfn
include string_utils.gfn
include assertion.gfn
include extra.gfn

open AWM.gdt -q			# quarterly
series y = YGA
list xlist = D743 FDD

function void test_naiveFC_meanfc_awm_rol (series y)
    printf "Start test_naiveFC() ('meanfc') for 'rolling'\n\
      case with AWM_data with sufficient future values."

    bundle opts = null
    scalar opts.horizon = 2
    string opts.type_moving_window = "rolling"

    bundle b = null
    bundle b = naiveFC(y, "meanfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.meanfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.meanfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.meanfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.meanfc.forecasts_upper_bound)

    matrix point = forecast_results.meanfc.forecasts_point
    matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1978:2")

    assert_equal_str(b.t1_forecast_date, "1978:3")
    assert_equal_str(b.t2_forecast_date, "1998:2")

    assert_equal_num(b.window_length, 27)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.meanfc), 3)

    assert_equal_num(cols(point), 80)
    assert_equal_num(rows(point), 2)
    assert_equal_num(cols(lower_bound), 80)
    assert_equal_num(rows(lower_bound), 2)
    assert_equal_num(cols(upper_bound), 80)
    assert_equal_num(rows(upper_bound), 2)

    assert_equal_str(col_labels_point[1], "1978:2")
    assert_equal_str(col_labels_lower[1], "1978:2")
    assert_equal_str(col_labels_upper[1], "1978:2")
    assert_equal_str(col_labels_point[2], "1978:3")
    assert_equal_str(col_labels_lower[2], "1978:3")
    assert_equal_str(col_labels_upper[2], "1978:3")
    assert_equal_str(col_labels_point[80], "1998:1")
    assert_equal_str(col_labels_lower[80], "1998:1")
    assert_equal_str(col_labels_upper[80], "1998:1")

    assert_equal_str(row_labels_point[1], "h=1")
    assert_equal_str(row_labels_lower[1], "h=1")
    assert_equal_str(row_labels_upper[1], "h=1")

    assert_equal_str(row_labels_point[2], "h=2")
    assert_equal_str(row_labels_lower[2], "h=2")
    assert_equal_str(row_labels_upper[2], "h=2")

    assert_almost_equal_num(point[1,1], 1.0040, 1e-4)
    assert_almost_equal_num(point[2,1], 1.0040, 1e-4)
    assert_almost_equal_num(point[1,2], 1.0042, 1e-4)
    assert_almost_equal_num(point[2,2], 1.0042, 1e-4)
    assert_almost_equal_num(point[1,80], 0.98586, 1e-5)
    assert_false(ok(point[2,80]))

    assert_almost_equal_num(lower_bound[1,1], -0.64746, 1e-5)
    assert_almost_equal_num(lower_bound[2,1], -0.64746, 1e-5)
    assert_almost_equal_num(lower_bound[1,2], -0.64755, 1e-5)
    assert_almost_equal_num(lower_bound[2,2], -0.64755, 1e-5)
    assert_almost_equal_num(lower_bound[1,80], -0.63574, 1e-5)
    assert_false(ok(lower_bound[2,80]))

    assert_almost_equal_num(upper_bound[1,1], 2.6555, 1e-4)
    assert_almost_equal_num(upper_bound[2,1], 2.6555, 1e-4)
    assert_almost_equal_num(upper_bound[1,2], 2.6559, 1e-4)
    assert_almost_equal_num(upper_bound[2,2], 2.6559, 1e-4)
    assert_almost_equal_num(upper_bound[1,80], 2.6075, 1e-4)
    assert_false(ok(upper_bound[2,80]))
end function
test_naiveFC_meanfc_awm_rol(y)


function void test_naiveFC_meanfc_awm_rol_exo (series y, list xlist)
    printf "Start test_naiveFC() ('meanfc') for 'rolling'\n\
      case with AWM_data with sufficient future values\n\
      and 2 exogenous."

    bundle opts = null
    list opts.xlist = xlist
    scalar opts.horizon = 2
    string opts.type_moving_window = "rolling"

    bundle b = null
    bundle b = naiveFC(y, "meanfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.meanfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.meanfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.meanfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.meanfc.forecasts_upper_bound)

    matrix point = forecast_results.meanfc.forecasts_point
    matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1978:2")

    assert_equal_str(b.t1_forecast_date, "1978:3")
    assert_equal_str(b.t2_forecast_date, "1998:2")
    assert_equal_str(b.t2_date_xlist, "1998:4")

    assert_equal_num(b.window_length, 27)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.meanfc), 3)

    assert_equal_num(cols(point), 80)
    assert_equal_num(rows(point), 2)
    assert_equal_num(cols(lower_bound), 80)
    assert_equal_num(rows(lower_bound), 2)
    assert_equal_num(cols(upper_bound), 80)
    assert_equal_num(rows(upper_bound), 2)

    assert_equal_str(col_labels_point[1], "1978:2")
    assert_equal_str(col_labels_lower[1], "1978:2")
    assert_equal_str(col_labels_upper[1], "1978:2")
    assert_equal_str(col_labels_point[2], "1978:3")
    assert_equal_str(col_labels_lower[2], "1978:3")
    assert_equal_str(col_labels_upper[2], "1978:3")
    assert_equal_str(col_labels_point[80], "1998:1")
    assert_equal_str(col_labels_lower[80], "1998:1")
    assert_equal_str(col_labels_upper[80], "1998:1")

    assert_equal_str(row_labels_point[1], "h=1")
    assert_equal_str(row_labels_lower[1], "h=1")
    assert_equal_str(row_labels_upper[1], "h=1")

    assert_equal_str(row_labels_point[2], "h=2")
    assert_equal_str(row_labels_lower[2], "h=2")
    assert_equal_str(row_labels_upper[2], "h=2")

    assert_almost_equal_num(point[1,1], 1.0012, 1e-4)
    assert_almost_equal_num(point[2,1], 1.0008, 1e-4)
    assert_almost_equal_num(point[1,2], 0.99982, 1e-5)
    assert_almost_equal_num(point[2,2], 0.99960, 1e-5)

    assert_almost_equal_num(lower_bound[1,1], -0.64560, 1e-5)
    assert_almost_equal_num(lower_bound[2,1], -0.64537, 1e-5)
    assert_almost_equal_num(lower_bound[1,2], -0.64474, 1e-5)
    assert_almost_equal_num(lower_bound[2,2], -0.64459, 1e-5)

    assert_almost_equal_num(upper_bound[1,1], 2.6479, 1e-4)
    assert_almost_equal_num(upper_bound[2,1], 2.6470, 1e-4)
    assert_almost_equal_num(upper_bound[1,2], 2.6444, 1e-4)
    assert_almost_equal_num(upper_bound[2,2], 2.6438, 1e-4)
end function
test_naiveFC_meanfc_awm_rol_exo(y, xlist)



function void test_naiveFC_allmods_awm_rol_ex (series y, list xlist)
    printf "Start test_naiveFC() for 'rolling'\n\
      case with AWM_data with sufficient future values\n\
      and 2 exogenous."
    printf "\nRun several methods just to make sure no errors occur.\n"

    strings models = get_estimator_names(1)

    loop i=1..nelem(models) -q
        printf "\nStart model %s.\n", models[i]

        string model_name = models[i]

        bundle opts = null
        list opts.xlist = xlist
        scalar opts.horizon = 2
        string opts.type_moving_window = "rolling"

        bundle b = null
        bundle b = naiveFC(y, "@model_name", opts)

        if b.error == 0
            bundle forecast_results = b.forecast_results

            strings col_labels_point = cnameget(forecast_results["@model_name"].forecasts_point)
            strings col_labels_lower = cnameget(forecast_results["@model_name"].forecasts_lower_bound)
            strings col_labels_upper = cnameget(forecast_results["@model_name"].forecasts_upper_bound)
            strings row_labels_point = rnameget(forecast_results["@model_name"].forecasts_point)
            strings row_labels_lower = rnameget(forecast_results["@model_name"].forecasts_lower_bound)
            strings row_labels_upper = rnameget(forecast_results["@model_name"].forecasts_upper_bound)

            matrix point = forecast_results["@model_name"].forecasts_point
            matrix lower_bound = forecast_results["@model_name"].forecasts_lower_bound
            matrix upper_bound = forecast_results["@model_name"].forecasts_upper_bound

            assert_equal_str(b.t1_train_date, "1971:4")
            assert_equal_str(b.t2_train_date, "1978:2")

            assert_equal_str(b.t1_forecast_date, "1978:3")
            assert_equal_str(b.t2_forecast_date, "1998:2")
            assert_equal_str(b.t2_date_xlist, "1998:4")

            assert_equal_num(b.window_length, 27)
            assert_equal_num(b.horizon, 2)

            assert_equal_num(nelem(forecast_results), 1)
            assert_equal_num(nelem(forecast_results["@model_name"]), 3)

            assert_equal_num(cols(point), 80)
            assert_equal_num(rows(point), 2)
            assert_equal_num(cols(lower_bound), 80)
            assert_equal_num(rows(lower_bound), 2)
            assert_equal_num(cols(upper_bound), 80)
            assert_equal_num(rows(upper_bound), 2)

            assert_equal_str(col_labels_point[1], "1978:2")
            assert_equal_str(col_labels_lower[1], "1978:2")
            assert_equal_str(col_labels_upper[1], "1978:2")
            assert_equal_str(col_labels_point[2], "1978:3")
            assert_equal_str(col_labels_lower[2], "1978:3")
            assert_equal_str(col_labels_upper[2], "1978:3")
            assert_equal_str(col_labels_point[80], "1998:1")
            assert_equal_str(col_labels_lower[80], "1998:1")
            assert_equal_str(col_labels_upper[80], "1998:1")

            assert_equal_str(row_labels_point[1], "h=1")
            assert_equal_str(row_labels_lower[1], "h=1")
            assert_equal_str(row_labels_upper[1], "h=1")

            assert_equal_str(row_labels_point[2], "h=2")
            assert_equal_str(row_labels_lower[2], "h=2")
            assert_equal_str(row_labels_upper[2], "h=2")

            printf "\nSuccesfully finished model %s.\n", models[i]
        endif

    endloop

end function
test_naiveFC_allmods_awm_rol_ex(y, xlist)



open daily_data.gdt -q			# daily
series y = target
list xlist = kracher budget

function void test_naiveFC_medi_daily_rol (series y, list xlist)
    printf "Start test_naiveFC() ('meanfc') for 'rolling'\n\
      case with daily data with sufficient future values\n\
      and 2 exogenous."

    bundle opts = null					# setup additional options
    scalar opts.horizon = 2
    string opts.type_moving_window = "rolling"

    bundle b = null
    bundle b = naiveFC(y, "medianfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.medianfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.medianfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.medianfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.medianfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.medianfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.medianfc.forecasts_upper_bound)

    matrix point = forecast_results.medianfc.forecasts_point
    matrix lower_bound = forecast_results.medianfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.medianfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "2018-01-01")
    assert_equal_str(b.t2_train_date, "2018-06-27")

    assert_equal_str(b.t1_forecast_date, "2018-06-28")
    assert_equal_str(b.t2_forecast_date, "2019-12-10")

    assert_equal_num(b.window_length, 178)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.medianfc), 3)

    assert_equal_num(cols(point), 531)
    assert_equal_num(rows(point), 2)
    assert_equal_num(cols(lower_bound), 531)
    assert_equal_num(rows(lower_bound), 2)
    assert_equal_num(cols(upper_bound), 531)
    assert_equal_num(rows(upper_bound), 2)

    assert_equal_str(col_labels_point[1], "2018-06-27")
    assert_equal_str(col_labels_lower[1], "2018-06-27")
    assert_equal_str(col_labels_upper[1], "2018-06-27")

    assert_equal_str(col_labels_point[531], "2019-12-09")
    assert_equal_str(col_labels_lower[531], "2019-12-09")
    assert_equal_str(col_labels_upper[531], "2019-12-09")

    assert_equal_str(row_labels_point[1], "h=1")
    assert_equal_str(row_labels_lower[1], "h=1")
    assert_equal_str(row_labels_upper[1], "h=1")

    assert_equal_str(row_labels_point[2], "h=2")
    assert_equal_str(row_labels_lower[2], "h=2")
    assert_equal_str(row_labels_upper[2], "h=2")

    eval lower_bound[,1] ~ point[,1] ~ upper_bound[,1]

    assert_almost_equal_num(point[1,1], 53172, 1e-0)
    assert_almost_equal_num(point[2,1], 53172, 1e-0)
    assert_almost_equal_num(lower_bound[1,1], -34288, 1e-0)
    assert_almost_equal_num(lower_bound[2,1], -34288, 1e-0)
    assert_almost_equal_num(upper_bound[1,1], 140631, 1e-0)
    assert_almost_equal_num(upper_bound[2,1], 140631, 1e-0)

    assert_almost_equal_num(point[1,531], 39789, 1e-0)
    assert_almost_equal_num(lower_bound[1,531], -25658, 1e-0)
    assert_almost_equal_num(upper_bound[1,531], 105236, 1e-0)

    assert_false(ok(point[2,531]))
    assert_false(ok(lower_bound[2,531]))
    assert_false(ok(upper_bound[2,531]))
end function
test_naiveFC_medi_daily_rol(y, xlist)


function void test_naiveFC_allmods_awm_rol_ex (series y, list xlist)
    printf "Start test_naiveFC() for 'rolling'\n\
      case with daily data with sufficient future values\n\
      and 2 exogenous."
    printf "\nRun several methods just to make sure no errors occur.\n"

    strings models = get_estimator_names(1)

    loop i=1..nelem(models) -q
        printf "\nStart model %s.\n", models[i]

        string model_name = models[i]

        bundle opts = null
        list opts.xlist = xlist
        scalar opts.horizon = 2
        string opts.type_moving_window = "rolling"

        bundle b = null
        bundle b = naiveFC(y, "@model_name", opts)

        if b.error == 0
            bundle forecast_results = b.forecast_results

            strings col_labels_point = cnameget(forecast_results["@model_name"].forecasts_point)
            strings col_labels_lower = cnameget(forecast_results["@model_name"].forecasts_lower_bound)
            strings col_labels_upper = cnameget(forecast_results["@model_name"].forecasts_upper_bound)
            strings row_labels_point = rnameget(forecast_results["@model_name"].forecasts_point)
            strings row_labels_lower = rnameget(forecast_results["@model_name"].forecasts_lower_bound)
            strings row_labels_upper = rnameget(forecast_results["@model_name"].forecasts_upper_bound)

            matrix point = forecast_results["@model_name"].forecasts_point
            matrix lower_bound = forecast_results["@model_name"].forecasts_lower_bound
            matrix upper_bound = forecast_results["@model_name"].forecasts_upper_bound

            assert_equal_str(b.t1_train_date, "2018-01-01")
            assert_equal_str(b.t2_train_date, "2018-06-27")

            assert_equal_str(b.t1_forecast_date, "2018-06-28")
            assert_equal_str(b.t2_forecast_date, "2019-12-10")

            assert_equal_num(b.window_length, 178)
            assert_equal_num(b.horizon, 2)

            assert_equal_num(nelem(forecast_results), 1)
            assert_equal_num(nelem(forecast_results["@model_name"]), 3)

            assert_equal_num(cols(point), 531)
            assert_equal_num(rows(point), 2)
            assert_equal_num(cols(lower_bound), 531)
            assert_equal_num(rows(lower_bound), 2)
            assert_equal_num(cols(upper_bound), 531)
            assert_equal_num(rows(upper_bound), 2)

            assert_equal_str(col_labels_point[1], "2018-06-27")
            assert_equal_str(col_labels_lower[1], "2018-06-27")
            assert_equal_str(col_labels_upper[1], "2018-06-27")

            assert_equal_str(col_labels_point[531], "2019-12-09")
            assert_equal_str(col_labels_lower[531], "2019-12-09")
            assert_equal_str(col_labels_upper[531], "2019-12-09")

            assert_equal_str(row_labels_point[1], "h=1")
            assert_equal_str(row_labels_lower[1], "h=1")
            assert_equal_str(row_labels_upper[1], "h=1")

            assert_equal_str(row_labels_point[2], "h=2")
            assert_equal_str(row_labels_lower[2], "h=2")
            assert_equal_str(row_labels_upper[2], "h=2")

            printf "\nSuccesfully finished model %s.\n", models[i]
        endif

    endloop

end function
test_naiveFC_allmods_awm_rol_ex(y, xlist)





# FIXME: 'recursive' case not implemented, yet
/*
   open AWM.gdt -q			# quarterly
   series y = YGA
   function void test_naiveFC_meanfc_awm_rec (series y)
   printf "Start test_naiveFC() ('meanfc') for 'recursive'\n\
   case with AWM_data with sufficient future values."

   bundle opts = null
   scalar opts.horizon = 2
   string opts.type_moving_window = "recursive"

   bundle b = null
   bundle b = naiveFC(y, "meanfc", opts)
   bundle forecast_results = b.forecast_results

   strings col_labels_point = cnameget(forecast_results.meanfc.forecasts_point)
   strings col_labels_lower = cnameget(forecast_results.meanfc.forecasts_lower_bound)
   strings col_labels_upper = cnameget(forecast_results.meanfc.forecasts_upper_bound)
   strings row_labels_point = rnameget(forecast_results.meanfc.forecasts_point)
   strings row_labels_lower = rnameget(forecast_results.meanfc.forecasts_lower_bound)
   strings row_labels_upper = rnameget(forecast_results.meanfc.forecasts_upper_bound)

   matrix point = forecast_results.meanfc.forecasts_point
   matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
   matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

   assert_equal_str(b.t1_train_date, "1971:4")
   assert_equal_str(b.t2_train_date, "1978:2")

   assert_equal_str(b.t1_forecast_date, "1978:3")
   assert_equal_str(b.t2_forecast_date, "1998:2")

   assert_equal_num(b.window_length, 27)
   assert_equal_num(b.horizon, 2)

   assert_equal_num(nelem(forecast_results), 1)
   assert_equal_num(nelem(forecast_results.meanfc), 3)

   assert_equal_num(cols(point), 80)
   assert_equal_num(rows(point), 2)
   assert_equal_num(cols(lower_bound), 80)
   assert_equal_num(rows(lower_bound), 2)
   assert_equal_num(cols(upper_bound), 80)
   assert_equal_num(rows(upper_bound), 2)

   assert_equal_str(col_labels_point[1], "1978:2")
   assert_equal_str(col_labels_lower[1], "1978:2")
   assert_equal_str(col_labels_upper[1], "1978:2")
   assert_equal_str(col_labels_point[2], "1978:3")
   assert_equal_str(col_labels_lower[2], "1978:3")
   assert_equal_str(col_labels_upper[2], "1978:3")
   assert_equal_str(col_labels_point[80], "1998:1")
   assert_equal_str(col_labels_lower[80], "1998:1")
   assert_equal_str(col_labels_upper[80], "1998:1")

   assert_equal_str(row_labels_point[1], "h=1")
   assert_equal_str(row_labels_lower[1], "h=1")
   assert_equal_str(row_labels_upper[1], "h=1")

   assert_equal_str(row_labels_point[2], "h=2")
   assert_equal_str(row_labels_lower[2], "h=2")
   assert_equal_str(row_labels_upper[2], "h=2")

   smpl 1971:4 1978:3
   summary y
   stop

   assert_almost_equal_num(point[1,1], 1.0040, 1e-4)
   assert_almost_equal_num(point[2,1], 1.0040, 1e-4)
   assert_almost_equal_num(point[1,2], 1.0039, 1e-4)
   assert_almost_equal_num(point[2,2], 1.0039, 1e-4)
   assert_almost_equal_num(point[1,80], 0.99448, 1e-5)
   assert_false(ok(point[2,80]))

   print "huhu"
   stop

   assert_almost_equal_num(lower_bound[1,1], -0.64746, 1e-5)
   assert_almost_equal_num(lower_bound[2,1], -0.64746, 1e-5)
   assert_almost_equal_num(lower_bound[1,2], -0.64755, 1e-5)
   assert_almost_equal_num(lower_bound[2,2], -0.64755, 1e-5)
   assert_almost_equal_num(lower_bound[1,80], -0.63574, 1e-5)
   assert_false(ok(lower_bound[2,80]))

   assert_almost_equal_num(upper_bound[1,1], 2.6555, 1e-4)
   assert_almost_equal_num(upper_bound[2,1], 2.6555, 1e-4)
   assert_almost_equal_num(upper_bound[1,2], 2.6559, 1e-4)
   assert_almost_equal_num(upper_bound[2,2], 2.6559, 1e-4)
   assert_almost_equal_num(upper_bound[1,80], 2.6075, 1e-4)
   assert_false(ok(upper_bound[2,80]))
   end function
   test_naiveFC_meanfc_awm_rec(y)



   open AWM.gdt -q			# quarterly
   series y = YGA
   list xlist = D743 FDD
   function void test_naiveFC_meanfc_awm_rec_exo (series y, list xlist)
   printf "Start test_naiveFC() ('meanfc') for 'recursive'\n\
   case with AWM_data with sufficient future values\n\
   and 2 exogenous."

   bundle opts = null
   list opts.xlist = xlist
   scalar opts.horizon = 2
   string opts.type_moving_window = "recursive"

   bundle b = null
   bundle b = naiveFC(y, "meanfc", opts)
   bundle forecast_results = b.forecast_results

   strings col_labels_point = cnameget(forecast_results.meanfc.forecasts_point)
   strings col_labels_lower = cnameget(forecast_results.meanfc.forecasts_lower_bound)
   strings col_labels_upper = cnameget(forecast_results.meanfc.forecasts_upper_bound)
   strings row_labels_point = rnameget(forecast_results.meanfc.forecasts_point)
   strings row_labels_lower = rnameget(forecast_results.meanfc.forecasts_lower_bound)
   strings row_labels_upper = rnameget(forecast_results.meanfc.forecasts_upper_bound)

   matrix point = forecast_results.meanfc.forecasts_point
   matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
   matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

   assert_equal_str(b.t1_train_date, "1971:4")
   assert_equal_str(b.t2_train_date, "1978:2")

   assert_equal_str(b.t1_forecast_date, "1978:3")
   assert_equal_str(b.t2_forecast_date, "1998:2")
   assert_equal_str(b.t2_date_xlist, "1998:4")

   assert_equal_num(b.window_length, 27)
   assert_equal_num(b.horizon, 2)

   assert_equal_num(nelem(forecast_results), 1)
   assert_equal_num(nelem(forecast_results.meanfc), 3)

   assert_equal_num(cols(point), 80)
   assert_equal_num(rows(point), 2)
   assert_equal_num(cols(lower_bound), 80)
   assert_equal_num(rows(lower_bound), 2)
   assert_equal_num(cols(upper_bound), 80)
   assert_equal_num(rows(upper_bound), 2)

   assert_equal_str(col_labels_point[1], "1978:2")
   assert_equal_str(col_labels_lower[1], "1978:2")
   assert_equal_str(col_labels_upper[1], "1978:2")
   assert_equal_str(col_labels_point[2], "1978:3")
   assert_equal_str(col_labels_lower[2], "1978:3")
   assert_equal_str(col_labels_upper[2], "1978:3")
   assert_equal_str(col_labels_point[80], "1998:1")
   assert_equal_str(col_labels_lower[80], "1998:1")
   assert_equal_str(col_labels_upper[80], "1998:1")

   assert_equal_str(row_labels_point[1], "h=1")
   assert_equal_str(row_labels_lower[1], "h=1")
   assert_equal_str(row_labels_upper[1], "h=1")

   assert_equal_str(row_labels_point[2], "h=2")
   assert_equal_str(row_labels_lower[2], "h=2")
   assert_equal_str(row_labels_upper[2], "h=2")

   assert_almost_equal_num(point[1,1], 1.0012, 1e-4)
   assert_almost_equal_num(point[2,1], 1.0008, 1e-4)
   assert_almost_equal_num(point[1,2], 0.99982, 1e-5)
   assert_almost_equal_num(point[2,2], 0.99960, 1e-5)

   assert_almost_equal_num(lower_bound[1,1], -0.64560, 1e-5)
   assert_almost_equal_num(lower_bound[2,1], -0.64537, 1e-5)
   assert_almost_equal_num(lower_bound[1,2], -0.64474, 1e-5)
   assert_almost_equal_num(lower_bound[2,2], -0.64459, 1e-5)

   assert_almost_equal_num(upper_bound[1,1], 2.6479, 1e-4)
   assert_almost_equal_num(upper_bound[2,1], 2.6470, 1e-4)
   assert_almost_equal_num(upper_bound[1,2], 2.6444, 1e-4)
   assert_almost_equal_num(upper_bound[2,2], 2.6438, 1e-4)
   end function
   test_naiveFC_meanfc_awm_rec_exo(y, xlist)
*/


printf "\nInfo: All tests for moving window cases passed.\n"

