set verbose off
clear

include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force

include CvDataSplitter.gfn
include string_utils.gfn
include assertion.gfn
include extra.gfn


nulldata 12
series y = 0
smpl time>10 --restrict
y = NA
smpl full
setobs 7 2020-01-01 --time-series
function void test_naiveFC_meanfc_zero_stat (series y)
    printf "Start test_naiveFC() ('meanfc') for 'static'\n\
      case with a series which includes only zeros."

    scalar horizon = 2
    bundle opts = null					# setup additional options
    opts.horizon = horizon
    opts.endogenous_in_logs = FALSE

    bundle b = null
    bundle b = naiveFC(y, "meanfc", opts)

    bundle forecast_results = b.forecast_results
    matrix point = forecast_results.meanfc.forecasts_point
    matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

    assert(ok(sum(point)) == FALSE)
    assert(ok(sum(lower_bound)) == FALSE)
    assert(ok(sum(upper_bound)) == FALSE)
end function
test_naiveFC_meanfc_zero_stat(y)


open AWM.gdt -q			# quarterly
series y = YGA
function void test_naiveFC_meanfc_awm_stat (series y)
    printf "Start test_naiveFC() ('meanfc') for 'static'\n\
      case with AWM_data with sufficient future values."

    scalar horizon = 2
    bundle opts = null					# setup additional options
    opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "meanfc", opts)

    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.meanfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.meanfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.meanfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.meanfc.forecasts_upper_bound)

    matrix point = forecast_results.meanfc.forecasts_point
    matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "1998:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.meanfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[2], "1998:4")
    assert_equal_str(row_labels_lower[2], "1998:4")
    assert_equal_str(row_labels_upper[2], "1998:4")

    assert_almost_equal_num(point[1], 0.99446, 1e-5)
    assert_almost_equal_num(point[2], 0.99446, 1e-5)

    assert_almost_equal_num(lower_bound[1], 0.971799, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.971799, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.01712, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.01712, 1e-4)
end function
test_naiveFC_meanfc_awm_stat(y)


open AWM.gdt -q			# quarterly
series y = YGA
function void test_naiveFC_medianfc_awm_stat (series y)
    print "Start test_naiveFC() ('medianfc') for 'static' case with AWM_data"

    scalar horizon = 2
    bundle opts = null					# setup additional options
    opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "medianfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.medianfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.medianfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.medianfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.medianfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.medianfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.medianfc.forecasts_upper_bound)

    matrix point = forecast_results.medianfc.forecasts_point
    matrix lower_bound = forecast_results.medianfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.medianfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "1998:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.medianfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[2], "1998:4")
    assert_equal_str(row_labels_lower[2], "1998:4")
    assert_equal_str(row_labels_upper[2], "1998:4")

    assert_almost_equal_num(point[1], 0.99160, 1e-5)
    assert_almost_equal_num(point[2], 0.99160, 1e-5)

    assert_almost_equal_num(lower_bound[1], 0.972851, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.972851, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.01035, 1e-5)
    assert_almost_equal_num(upper_bound[2], 1.01035, 1e-5)
end function
test_naiveFC_medianfc_awm_stat(y)




open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_smeanfc_awm_stat (series y)
    print "Start test_naiveFC() ('smeanfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "smeanfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.smeanfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.smeanfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.smeanfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.smeanfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.smeanfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.smeanfc.forecasts_upper_bound)

    matrix point = forecast_results.smeanfc.forecasts_point
    matrix lower_bound = forecast_results.smeanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.smeanfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.smeanfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.99465, 1e-5)
    assert_almost_equal_num(point[2], 0.99496, 1e-5)
    assert_almost_equal_num(point[3], 0.99397, 1e-5)
    assert_almost_equal_num(point[4], 0.99426, 1e-5)
    assert_almost_equal_num(point[10], 0.99496, 1e-5)

    assert_almost_equal_num(lower_bound[1], 0.97134, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.97167, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.97134, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.97167, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0180, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0182, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0180, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0182, 1e-4)
end function
test_naiveFC_smeanfc_awm_stat(y)



open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_smeanfc_awm_stat (series y)
    print "Start test_naiveFC() ('smeanfc') for 'static' case with AWM_data and 95% CI"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon
    scalar opts.level = 0.95

    bundle b = null
    bundle b = naiveFC(y, "smeanfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.smeanfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.smeanfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.smeanfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.smeanfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.smeanfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.smeanfc.forecasts_upper_bound)

    matrix point = forecast_results.smeanfc.forecasts_point
    matrix lower_bound = forecast_results.smeanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.smeanfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.smeanfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.99465, 1e-5)
    assert_almost_equal_num(point[2], 0.99496, 1e-5)
    assert_almost_equal_num(point[3], 0.99397, 1e-5)
    assert_almost_equal_num(point[4], 0.99426, 1e-5)
    assert_almost_equal_num(point[10], 0.99496, 1e-5)

    assert_almost_equal_num(lower_bound[1], 0.96688, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.96721, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.96688, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.96721, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0224, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0227, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0224, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0227, 1e-4)
end function
test_naiveFC_smeanfc_awm_stat(y)



open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_smedianfc_awm_stat (series y)
    print "Start test_naiveFC() ('smedianfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "smedianfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.smedianfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.smedianfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.smedianfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.smedianfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.smedianfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.smedianfc.forecasts_upper_bound)

    matrix point = forecast_results.smedianfc.forecasts_point
    matrix lower_bound = forecast_results.smedianfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.smedianfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.smedianfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.9943, 1e-4)
    assert_almost_equal_num(point[2], 0.9922, 1e-4)
    assert_almost_equal_num(point[3], 0.9912, 1e-4)
    assert_almost_equal_num(point[4], 0.9916, 1e-4)
    assert_almost_equal_num(point[10], 0.9922, 1e-4)

    assert_almost_equal_num(lower_bound[1], 0.97480, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.97277, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.97480, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.97277, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0137, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0116, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0137, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0116, 1e-4)
end function
test_naiveFC_smedianfc_awm_stat(y)


open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_snaivefc_awm_stat (series y)
    print "Start test_naiveFC() ('snaivefc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "snaivefc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.snaivefc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.snaivefc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.snaivefc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.snaivefc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.snaivefc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.snaivefc.forecasts_upper_bound)

    matrix point = forecast_results.snaivefc.forecasts_point
    matrix lower_bound = forecast_results.snaivefc.forecasts_lower_bound
    matrix upper_bound = forecast_results.snaivefc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.snaivefc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.9872, 1e-4)
    assert_almost_equal_num(point[2], 0.9884, 1e-4)
    assert_almost_equal_num(point[3], 0.9915, 1e-4)
    assert_almost_equal_num(point[4], 0.9916, 1e-4)
    assert_almost_equal_num(point[10], 0.9884, 1e-4)

    assert_almost_equal_num(lower_bound[1], 0.96452, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.96572, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.95512, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.94911, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0099, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0111, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0193, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0277, 1e-4)
end function
test_naiveFC_snaivefc_awm_stat(y)


open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_snaivedriftfc (series y)
    print "Start test_naiveFC() ('snaivedriftfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "snaivedriftfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.snaivedriftfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.snaivedriftfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.snaivedriftfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.snaivedriftfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.snaivedriftfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.snaivedriftfc.forecasts_upper_bound)

    matrix point = forecast_results.snaivedriftfc.forecasts_point
    matrix lower_bound = forecast_results.snaivedriftfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.snaivedriftfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.snaivedriftfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.98664, 1e-5)
    assert_almost_equal_num(point[2], 0.98784, 1e-5)
    assert_almost_equal_num(point[3], 0.99094, 1e-5)
    assert_almost_equal_num(point[4], 0.99104, 1e-5)
    assert_almost_equal_num(point[10], 0.98673, 1e-5)
    
    assert_almost_equal_num(lower_bound[1], 0.96396, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.96516, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.95401, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.94745, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0093, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0105, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0182, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0260, 1e-4)
end function
test_naiveFC_snaivedriftfc(y)


open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_rwfc_awm_stat (series y)
    print "Start test_naiveFC() ('rwfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "rwfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.rwfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.rwfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.rwfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.rwfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.rwfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.rwfc.forecasts_upper_bound)

    matrix point = forecast_results.rwfc.forecasts_point
    matrix lower_bound = forecast_results.rwfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.rwfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.rwfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.9916, 1e-4)
    assert_almost_equal_num(point[2], 0.9916, 1e-4)
    assert_almost_equal_num(point[3], 0.9916, 1e-4)
    assert_almost_equal_num(point[4], 0.9916, 1e-4)
    assert_almost_equal_num(point[10], 0.9916, 1e-4)

    assert_almost_equal_num(lower_bound[1], 0.98178, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.97771, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.96964, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.96054, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0014, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0055, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0136, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0227, 1e-4)
end function
test_naiveFC_rwfc_awm_stat(y)




open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_rwdriftfc_awm_stat (series y)
    print "Start test_naiveFC() ('rwdriftfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "rwdriftfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.rwdriftfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.rwdriftfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.rwdriftfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.rwdriftfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.rwdriftfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.rwdriftfc.forecasts_upper_bound)

    matrix point = forecast_results.rwdriftfc.forecasts_point
    matrix lower_bound = forecast_results.rwdriftfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.rwdriftfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.rwdriftfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.99154, 1e-5)
    assert_almost_equal_num(point[2], 0.99149, 1e-5)
    assert_almost_equal_num(point[3], 0.99143, 1e-5)
    assert_almost_equal_num(point[4], 0.99137, 1e-5)
    assert_almost_equal_num(point[10], 0.99103, 1e-5)

    assert_almost_equal_num(lower_bound[1], 0.98172, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.97760, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.96935, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.95997, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0014, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0054, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0133, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0221, 1e-4)
end function
test_naiveFC_rwdriftfc_awm_stat(y)



open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_ar1fc_awm_stat (series y)
    print "Start test_naiveFC() ('ar1fc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "ar1fc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.ar1fc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.ar1fc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.ar1fc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.ar1fc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.ar1fc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.ar1fc.forecasts_upper_bound)

    matrix point = forecast_results.ar1fc.forecasts_point
    matrix lower_bound = forecast_results.ar1fc.forecasts_lower_bound
    matrix upper_bound = forecast_results.ar1fc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.ar1fc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.99181, 1e-5)
    assert_almost_equal_num(point[2], 0.99201, 1e-5)
    assert_almost_equal_num(point[3], 0.99219, 1e-5)
    assert_almost_equal_num(point[4], 0.99234, 1e-5)
    assert_almost_equal_num(point[10], 0.99303, 1e-5)

    assert_almost_equal_num(lower_bound[1], 0.98218, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.97901, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.97446, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.97191, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0014, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0050, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0105, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0142, 1e-4)
end function
test_naiveFC_ar1fc_awm_stat(y)


open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_ar1trendfc_awm (series y)
    print "Start test_naiveFC() ('ar1trendfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "ar1trendfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.ar1trendfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.ar1trendfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.ar1trendfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.ar1trendfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.ar1trendfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.ar1trendfc.forecasts_upper_bound)

    matrix point = forecast_results.ar1trendfc.forecasts_point
    matrix lower_bound = forecast_results.ar1trendfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.ar1trendfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.ar1trendfc), 3)

    assert_equal_str(col_labels_point[1], "1998:2")
    assert_equal_str(col_labels_lower[1], "1998:2")
    assert_equal_str(col_labels_upper[1], "1998:2")

    assert_equal_str(row_labels_point[1], "1998:3")
    assert_equal_str(row_labels_lower[1], "1998:3")
    assert_equal_str(row_labels_upper[1], "1998:3")

    assert_equal_str(row_labels_point[10], "2000:4")
    assert_equal_str(row_labels_lower[10], "2000:4")
    assert_equal_str(row_labels_upper[10], "2000:4")

    assert_almost_equal_num(point[1], 0.99047, 1e-5)
    assert_almost_equal_num(point[2], 0.98945, 1e-5)
    assert_almost_equal_num(point[3], 0.98853, 1e-5)
    assert_almost_equal_num(point[4], 0.98770, 1e-5)
    assert_almost_equal_num(point[10], 0.98401, 1e-5)
    
    assert_almost_equal_num(lower_bound[1], 0.98086, 1e-5)
    assert_almost_equal_num(lower_bound[2], 0.97667, 1e-5)
    assert_almost_equal_num(lower_bound[5], 0.96985, 1e-5)
    assert_almost_equal_num(lower_bound[10], 0.96475, 1e-5)

    assert_almost_equal_num(upper_bound[1], 1.0001, 1e-4)
    assert_almost_equal_num(upper_bound[2], 1.0022, 1e-4)
    assert_almost_equal_num(upper_bound[5], 1.0040, 1e-4)
    assert_almost_equal_num(upper_bound[10], 1.0033, 1e-4)
end function
test_naiveFC_ar1trendfc_awm(y)


open AWM.gdt -q			# quarterly
dataset addobs 12
series y = YGA
function void test_naiveFC_avgfc_awm (series y)
    print "Start test_naiveFC() ('avgfc') for 'static' case with AWM_data"

    scalar horizon = 10
    bundle opts = null					# setup additional options
    scalar opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "avgfc", opts)
    bundle forecast_results = b.forecast_results

    assert_equal_str(b.t1_train_date, "1971:4")
    assert_equal_str(b.t2_train_date, "1998:2")

    assert_equal_str(b.t1_forecast_date, "1998:3")
    assert_equal_str(b.t2_forecast_date, "2000:4")

    assert_equal_num(b.window_length, 107)
    assert_equal_num(b.horizon, 10)

    assert_equal_num(nelem(forecast_results), 12)
    assert_equal_num(nelem(forecast_results.ar1trendfc), 3)
end function
#test_naiveFC_avgfc_awm(y) # FIXME: Does not work atm



open daily_data.gdt -q			# daily
series y = target

function void test_naiveFC_meanfc_daily_stat (series y)
    printf "Start test_naiveFC() ('meanfc') for 'static'\n\
      case with daily data with sufficient future values."

    scalar horizon = 2
    bundle opts = null					# setup additional options
    opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "meanfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.meanfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.meanfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.meanfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.meanfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.meanfc.forecasts_upper_bound)

    matrix point = forecast_results.meanfc.forecasts_point
    matrix lower_bound = forecast_results.meanfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.meanfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "2018-01-01")
    assert_equal_str(b.t2_train_date, "2019-12-10")

    assert_equal_str(b.t1_forecast_date, "2019-12-11")
    assert_equal_str(b.t2_forecast_date, "2019-12-12")

    assert_equal_num(b.window_length, 709)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.meanfc), 3)

    assert_equal_str(col_labels_point[1], "2019-12-10")
    assert_equal_str(col_labels_lower[1], "2019-12-10")
    assert_equal_str(col_labels_upper[1], "2019-12-10")

    assert_equal_str(row_labels_point[1], "2019-12-11")
    assert_equal_str(row_labels_lower[1], "2019-12-11")
    assert_equal_str(row_labels_upper[1], "2019-12-11")

    assert_equal_str(row_labels_point[2], "2019-12-12")
    assert_equal_str(row_labels_lower[2], "2019-12-12")
    assert_equal_str(row_labels_upper[2], "2019-12-12")

    assert_almost_equal_num(point[1], 53514.0, 1e-0)
    assert_almost_equal_num(point[2], 53514.0, 1e-0)

    assert_almost_equal_num(lower_bound[1], 5692.3, 1e-1)
    assert_almost_equal_num(lower_bound[2], 5692.3, 1e-1)

    assert_almost_equal_num(upper_bound[1], 101335.3152, 1e-4)
    assert_almost_equal_num(upper_bound[2], 101335.3152, 1e-4)
end function
test_naiveFC_meanfc_daily_stat(y)


open daily_data.gdt -q			# daily
series y = target
function void test_naiveFC_medi_daily_stat (series y)
    printf "Start test_naiveFC() ('medianfc') for 'static'\n\
      case with daily data with sufficient future values."

    scalar horizon = 2
    bundle opts = null					# setup additional options
    opts.horizon = horizon

    bundle b = null
    bundle b = naiveFC(y, "medianfc", opts)
    bundle forecast_results = b.forecast_results

    strings col_labels_point = cnameget(forecast_results.medianfc.forecasts_point)
    strings col_labels_lower = cnameget(forecast_results.medianfc.forecasts_lower_bound)
    strings col_labels_upper = cnameget(forecast_results.medianfc.forecasts_upper_bound)
    strings row_labels_point = rnameget(forecast_results.medianfc.forecasts_point)
    strings row_labels_lower = rnameget(forecast_results.medianfc.forecasts_lower_bound)
    strings row_labels_upper = rnameget(forecast_results.medianfc.forecasts_upper_bound)

    matrix point = forecast_results.medianfc.forecasts_point
    matrix lower_bound = forecast_results.medianfc.forecasts_lower_bound
    matrix upper_bound = forecast_results.medianfc.forecasts_upper_bound

    assert_equal_str(b.t1_train_date, "2018-01-01")
    assert_equal_str(b.t2_train_date, "2019-12-10")

    assert_equal_str(b.t1_forecast_date, "2019-12-11")
    assert_equal_str(b.t2_forecast_date, "2019-12-12")

    assert_equal_num(b.window_length, 709)
    assert_equal_num(b.horizon, 2)

    assert_equal_num(nelem(forecast_results), 1)
    assert_equal_num(nelem(forecast_results.medianfc), 3)

    assert_equal_str(col_labels_point[1], "2019-12-10")
    assert_equal_str(col_labels_lower[1], "2019-12-10")
    assert_equal_str(col_labels_upper[1], "2019-12-10")

    assert_equal_str(row_labels_point[1], "2019-12-11")
    assert_equal_str(row_labels_lower[1], "2019-12-11")
    assert_equal_str(row_labels_upper[1], "2019-12-11")

    assert_equal_str(row_labels_point[2], "2019-12-12")
    assert_equal_str(row_labels_lower[2], "2019-12-12")
    assert_equal_str(row_labels_upper[2], "2019-12-12")

    assert_almost_equal_num(point[1], 48204.0, 1e-0)
    assert_almost_equal_num(point[2], 48204.0, 1e-0)

    assert_almost_equal_num(lower_bound[1], 24332, 1e-0)
    assert_almost_equal_num(lower_bound[2], 24332, 1e-0)

    assert_almost_equal_num(upper_bound[1], 72075.85, 1e-2)
    assert_almost_equal_num(upper_bound[2], 72075.85, 1e-2)
end function
test_naiveFC_medi_daily_stat(y)


printf "\nInfo: All tests for running static cases passed.\n"
