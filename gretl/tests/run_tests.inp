set verbose off
clear

#string FILENAME = "foo.csv"		# dummy file

include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force

include string_utils.gfn
include assertion.gfn



function void test_fc_interval_width (void)
    print "Start with fc_interval_width()"

    matrix m = ones(2,1)
    m[1] = NA

    matrix y = fc_interval_width(m, 0.9)

    assert_false(ok(y[1]))
    assert_almost_equal_num(y[2], 1.644, 1e-3)
end function


function void test_gen_column_names (void)
    print "Start with gen_column_names()"

    bundle b = defbundle("which", "rw", "level", 0.9)
    strings S = gen_column_names(&b)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "rw")
    assert_equal_str(S[2], "Lo (5.0)")
    assert_equal_str(S[3], "Up (95.0)")

    bundle b = defbundle("which", "avgfc", "level", 0.9)
    strings S = gen_column_names(&b)
    assert_equal_num(nelem(S), 1)
    assert_equal_str(S[1], "avgfc")
end function


function void test_array_of_horizon_labels (void)
    print "Start with array_of_horizon_labels()"

    strings S = array_of_horizon_labels(2)
    assert_equal_str(S[1], " h=1")
    assert_equal_str(S[2], " h=2")
end function


print "Start with get_dates_forecasted()"
# NOTE: 'open' cannot be used inside functions
open denmark.gdt -q -p
strings S = get_dates_forecasted("1980:1", 2)
assert_equal_str(S[1], "1980:2")
assert_equal_str(S[2], "1980:3")

open hendry_jae.gdt -q -p
strings S = get_dates_forecasted("1899", 2)
assert_equal_str(S[1], "1900")
assert_equal_str(S[2], "1901")

open hamilton.gdt -q -p
strings S = get_dates_forecasted("1982:07", 2)
assert_equal_str(S[1], "1982:08")
assert_equal_str(S[2], "1982:09")

open djclose.gdt -q -p
strings S = get_dates_forecasted("1982-07-30", 2)
assert_equal_str(S[1], "1982-08-02")
assert_equal_str(S[2], "1982-08-03")


function void test_set_bundle (const series djclose)
    print "Start with set_bundle()"
    
    bundle Bret = set_bundle(djclose, "avg", \
      defbundle("horizon", 7, "level", \
      0.05, "type_moving_window", "rolling"))
      
    assert_equal_num(Bret.horizon, 7)
    assert_equal_num(Bret.level, 0.05)
    assert_equal_str(Bret.type_moving_window, "rolling")
    assert_equal_str(Bret.name_endo, "djclose")
end function


function void test_get_supported_ns_methods (void)
    print "Start with get_supported_nonseas_methods()"

    strings S = get_supported_nonseas_methods()
    assert_equal_num(nelem(S), 7)

    assert_equal_str(S[1], "meanfc")
    assert_equal_str(S[2], "medianfc")
    assert_equal_str(S[3], "rwfc")
    assert_equal_str(S[4], "rwdriftfc")
    assert_equal_str(S[5], "ar1fc")
    assert_equal_str(S[6], "ar1trendfc")
    assert_equal_str(S[7], "avgfc")
end function


function void test_get_supported_seas_methods (void)
    print "Start with get_supported_seas_methods()"

    strings S = get_supported_seas_methods()
    
    assert_equal_str(S[1], "smeanfc")
    assert_equal_str(S[2], "smedianfc")
    assert_equal_str(S[3], "snaivefc")
    assert_equal_str(S[4], "snaivedriftfc")
end function


function void test_methods_to_apply (void)
    print "Start with methods_to_apply()"

    bundle B = defbundle("is_seas", 0)
    methods_to_apply(&B)
    assert_equal_num(nelem(B.methods_used), 6)

    bundle B = defbundle("is_seas", 1)
    methods_to_apply(&B)
    assert_equal_num(nelem(B.methods_used), 10)
end function


function void test_prepare_result_matrices (void)
    print "Start with prepare_result_matrices()"

    bundle B = defbundle("is_seas", 0)
    prepare_result_matrices(&B)
    assert_equal_num(nelem(B), 8)
    assert_equal_num(nelem(B.fc_results_medianfc), 3)


    bundle B = defbundle("is_seas", 1)
    prepare_result_matrices(&B)
    assert_equal_num(nelem(B), 12)
    assert_equal_num(nelem(B.fc_results_snaivefc), 3)
end function

# As 'nulldata' command is applied below, we call some tests already here
test_fc_interval_width()
test_gen_column_names()
test_array_of_horizon_labels()
test_set_bundle(djclose)
test_get_supported_ns_methods()
test_get_supported_seas_methods()
test_methods_to_apply()
test_prepare_result_matrices()


print "Start with get_highest_period_series()"
nulldata 24 -p    

setobs 1 1 --time-series
series ser = get_highest_period_series()
assert_equal_num(min(ser), 1)
assert_equal_num(max(ser), 24)

setobs 4 2000:1 --time-series
series ser = get_highest_period_series()
assert_equal_num(min(ser), 1)
assert_equal_num(max(ser), 4)

setobs 5 2000-01-01 --time-series
series ser = get_highest_period_series()
assert_equal_num(ser[1], 3)
assert_equal_num(min(ser), 1)
assert_equal_num(max(ser), 31)

nulldata 40 -p
setobs 7 2000-01-01 --time-series
series ser = get_highest_period_series()
assert_equal_num(min(ser), 1)
assert_equal_num(max(ser), 31)

nulldata 400 -p
setobs 12 2000:01 --time-series
series ser = get_highest_period_series()
assert_equal_num(min(ser), 1)
assert_equal_num(max(ser), 12)


print "Start with add_ohe_periods_to_list()"
nulldata 40 -p
setobs 7 2000-01-01 --time-series
list L = null

list Lout = add_ohe_periods_to_list("smeanfc", L)
assert_equal_num(nelem(Lout), 30)
list Lout = add_ohe_periods_to_list("smedianfc", L)
assert_equal_num(nelem(Lout), 30)
list Lout = add_ohe_periods_to_list("foo", L)
assert_false(nelem(Lout))


function void test_add_linear_trend_to_list (void)
    print "Start with add_linear_trend_to_list()"

    list Lout = null    
    bundle B = defbundle("with_trend", 1)
    list Lout = add_linear_trend_to_list(&B, "ar1trendfc", Lout)
    assert_false(nelem(Lout))
    
    list Lout = null
    bundle B = defbundle("with_linear_trend", 1)
    list Lout = add_linear_trend_to_list(&B, "ar1trendfc", Lout)
    assert_equal_num(nelem(Lout), 1)
    
    list Lout = null
    bundle B = defbundle("with_linear_trend", 1)
    Lout = add_linear_trend_to_list(&B, "foo", Lout)
    assert_false(nelem(Lout))
end function


function void test_add_intercept_to_list (void)
    print "Start with add_intercept_to_list()"

    list L = null
    L = add_intercept_to_list("rwfc", L)
    assert_equal_num(nelem(L), 1)
    
    list L = null
    L = add_intercept_to_list("rwdriftfc", L)
    assert_equal_num(nelem(L), 1)
    
    list L = null
    L = add_intercept_to_list("foo", L)
    assert_equal_num(nelem(L), 1)
end function

test_add_linear_trend_to_list()
test_add_intercept_to_list()


print "Start with get_train_start_end_obsnums()"
nulldata 40 -p
setobs 7 2000-01-01 --time-series
bundle B = null
string B.t1_label = "2000-01-01"
string B.t2_label = "2000-01-31"
scalar B.horizon = 2
string B.type_moving_window = "static"

bundle Bret = get_train_start_end_obsnums(&B)

assert_equal_num(nelem(Bret), 2)
assert_true(inbundle(Bret, "t1_obsnum"))
assert_true(inbundle(Bret, "t2_obsnum"))
assert_equal_num(Bret.t1_obsnum, 1)
assert_equal_num(Bret.t2_obsnum, 31)

string B.t1_label = "2000-01-02"
string B.t2_label = "2000-02-03"
bundle Bret = get_train_start_end_obsnums(&B)
assert_equal_num(Bret.t1_obsnum, 2)
assert_equal_num(Bret.t2_obsnum, 34)


nulldata 7 -p
setobs 7 2000-01-01 --time-series
bundle B = null
scalar B.horizon = 2
string B.type_moving_window = "rolling"
scalar B.window_length = 5

bundle Bret = get_train_start_end_obsnums(&B)

assert_equal_num(nelem(Bret), 2)
assert_true(inbundle(Bret, "t1_obsnum"))
assert_true(inbundle(Bret, "t2_obsnum"))
assert_equal_num(Bret.t1_obsnum, 1)
assert_equal_num(Bret.t2_obsnum, 5)

scalar B.window_length = 8
bundle Bret = get_train_start_end_obsnums(&B)
assert_equal_num(Bret.t1_obsnum, -2)
assert_equal_num(Bret.t2_obsnum, 5)



printf "\nInfo: All tests passed.\n"

# do_naive_forecasting
# drop_missing_values
# nobs_to_add_to_dataset
# summarize_naive_fc_results

/* Function not finisched yet!
   matrix m = mshape(seq(1,9)',3,2)
   matrices M = defarray(m)
   bundle B = get_mean_fc_and_mean_sd(M)
   B
   eval B.fc_point_avg
*/


