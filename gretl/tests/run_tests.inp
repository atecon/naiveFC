set verbose off
clear

string WD = "/home/at/git/naiveFC/gretl"
string FILENAME = "foo.csv"		# dummy file

set workdir @WD
include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force

include string_utils.gfn
include assertion.gfn



function void test_fc_interval_width (void)
    print "Start with fc_interval_width()"

    matrix m = ones(2,1)
    m[1] = NA

    matrix y = fc_interval_width(m, 0.9)

    assert_false(ok(y[1]))
    assert_almost_equal_num(y[2], 1.644, 1e-3)
end function


function void test_gen_column_names (void)
    print "Start with gen_column_names()"

    bundle b = defbundle("which", "rw", "level", 0.9)
    strings S = gen_column_names(&b)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "rw")
    assert_equal_str(S[2], "Lo (5.0)")
    assert_equal_str(S[3], "Up (95.0)")

    bundle b = defbundle("which", "avgfc", "level", 0.9)
    strings S = gen_column_names(&b)
    assert_equal_num(nelem(S), 1)
    assert_equal_str(S[1], "avgfc")
end function


function void test_array_of_horizon_labels (void)
    print "Start with array_of_horizon_labels()"

    strings S = array_of_horizon_labels(2)
    assert_equal_str(S[1], " h=1")
    assert_equal_str(S[2], " h=2")
end function


print "Start with get_dates_forecasted()"
# NOTE: 'open' cannot be used inside functions
open denmark.gdt -q -p
strings S = get_dates_forecasted("1980:1", 2)
assert_equal_str(S[1], "1980:2")
assert_equal_str(S[2], "1980:3")

open hendry_jae.gdt -q -p
strings S = get_dates_forecasted("1899", 2)
assert_equal_str(S[1], "1900")
assert_equal_str(S[2], "1901")

open hamilton.gdt -q -p
strings S = get_dates_forecasted("1982:07", 2)
assert_equal_str(S[1], "1982:08")
assert_equal_str(S[2], "1982:09")

open djclose.gdt -q -p
strings S = get_dates_forecasted("1982-07-30", 2)
assert_equal_str(S[1], "1982-08-02")
assert_equal_str(S[2], "1982-08-03")



strings Sin = defarray("A", "B", "C")
strings S = drop_string_from_array(Sin, "A")
if nelem(S) != 2
    stop
endif
if S[1] != "B" && S[3] != "C"
    stop
endif

test_fc_interval_width()
test_gen_column_names()
test_array_of_horizon_labels()
print "huhu"
stop



bundle Bret = set_bundle(djclose, "avg", defbundle("horizon", 7, "level", \
  0.05, "type_moving_window", "rolling"))
if Bret.horizon != 7 || Bret.level != 0.05 || Bret.type_moving_window != "rolling" || \
      Bret.name_endo != "djclose"
    stop
endif


if nelem(get_supported_nonseas_methods()) != 7
    stop
endif
if get_supported_nonseas_methods()[1] != "meanfc" || \
      get_supported_nonseas_methods()[2] != "medianfc" || \
      get_supported_nonseas_methods()[3] != "rwfc" || \
      get_supported_nonseas_methods()[4] != "rwdriftfc" || \
      get_supported_nonseas_methods()[5] != "ar1fc" || \
      get_supported_nonseas_methods()[6] != "ar1trendfc" || \
      get_supported_nonseas_methods()[7] != "avgfc"

    stop
endif


if get_supported_seas_methods()[1] != "smeanfc" || \
      get_supported_seas_methods()[2] != "smedianfc" || \
      get_supported_seas_methods()[3] != "snaivefc" || \
      get_supported_seas_methods()[4] != "snaivedriftfc"

    stop
endif


bundle B = defbundle("is_seas", 0)
methods_to_apply(&B)
if nelem(B.methods_used) != 6
    stop
endif

bundle B = defbundle("is_seas", 1)
methods_to_apply(&B)
if nelem(B.methods_used) != 10
    stop
endif



bundle B = defbundle("is_seas", 0)
prepare_result_matrices(&B)
if nelem(B) != 8
    stop
endif
if nelem(B.fc_results_medianfc) != 3
    stop
endif

bundle B = defbundle("is_seas", 1)
prepare_result_matrices(&B)
if nelem(B) != 12
    stop
endif
if nelem(B.fc_results_snaivefc) != 3
    stop
endif



nulldata 24 -p
setobs 1 1 --time-series
if min(get_highest_period_series()) != 1 && max(get_highest_period_series()) != 24
    stop
endif

nulldata 24 -p
setobs 4 2000:1 --time-series
if min(get_highest_period_series()) != 1 && max(get_highest_period_series()) != 4
    stop
endif

nulldata 24 -p
setobs 5 2000-01-01 --time-series
if min(get_highest_period_series()) != 3 && max(get_highest_period_series()) != 31
    stop
endif

nulldata 40 -p
setobs 7 2000-01-01 --time-series
if min(get_highest_period_series()) != 1 && max(get_highest_period_series()) != 31
    stop
endif

nulldata 400 -p
setobs 12 2000:01 --time-series
if min(get_highest_period_series()) != 1 && max(get_highest_period_series()) != 12
    stop
endif



nulldata 40 -p
setobs 7 2000-01-01 --time-series
list L = null
if nelem(add_ohe_periods_to_list("smeanfc", L)) != 30 || \
      nelem(add_ohe_periods_to_list("smedianfc", L)) != 30

    stop
endif
if nelem(add_ohe_periods_to_list("foo", L)) != 0
    stop
endif

list L = null
bundle B = defbundle("with_trend", 1)
L = add_linear_trend_to_list(&B, "ar1trendfc", L)
if nelem(L) != 0
    stop
endif

list L = null
bundle B = defbundle("with_linear_trend", 1)
L = add_linear_trend_to_list(&B, "ar1trendfc", L)
if nelem(L) != 1
    stop
endif

list L = null
bundle B = defbundle("with_linear_trend", 1)
L = add_linear_trend_to_list(&B, "foo", L)
if nelem(L) != 0
    stop
endif


list L = null
if nelem(add_intercept_to_list("rwfc", L)) != 1 || \
      nelem(add_intercept_to_list("rwdriftfc", L)) != 1
    stop
endif
if nelem(add_ohe_periods_to_list ("foo", L)) != 0
    stop
endif



nulldata 40 -p
setobs 7 2000-01-01 --time-series
bundle B = null
string B.t1_label = "2000-01-01"
string B.t2_label = "2000-01-31"
scalar B.horizon = 2
string B.type_moving_window = "static"

bundle Bret = get_train_start_end_obsnums(&B)
if nelem(Bret) != 2
    stop
endif
if !inbundle(Bret, "t1_obsnum") || !inbundle(Bret, "t2_obsnum")
    stop
endif
if Bret.t1_obsnum != 1 || Bret.t2_obsnum != 31
    stop
endif

string B.t1_label = "2000-01-02"
string B.t2_label = "2000-02-03"
bundle Bret = get_train_start_end_obsnums(&B)
if Bret.t1_obsnum != 2 || Bret.t2_obsnum != 34
    stop
endif


nulldata 7 -p
setobs 7 2000-01-01 --time-series
bundle B = null
scalar B.horizon = 2
string B.type_moving_window = "rolling"
scalar B.window_length = 5
bundle Bret = get_train_start_end_obsnums(&B)
if nelem(Bret) != 2
    stop
endif
if !inbundle(Bret, "t1_obsnum") || !inbundle(Bret, "t2_obsnum")
    stop
endif
if Bret.t1_obsnum != 1 || Bret.t2_obsnum != 5
    stop
endif

scalar B.window_length = 8
bundle Bret = get_train_start_end_obsnums(&B)
if Bret.t1_obsnum != -2 || Bret.t2_obsnum != 5
    stop
endif





print "passed"
stop



eval $obsmajor
eval $obsminor
eval $obsmicro

# do_naive_forecasting
# drop_missing_values
# nobs_to_add_to_dataset
# summarize_naive_fc_results

/* Function not finisched yet!
   matrix m = mshape(seq(1,9)',3,2)
   matrices M = defarray(m)
   bundle B = get_mean_fc_and_mean_sd(M)
   B
   eval B.fc_point_avg
*/


printf "\nInfo: All tests passed.\n"


