set verbose off
clear

string WD = "/home/at/git/naiveFC/gretl"
string FILENAME = "foo.csv"		# dummy file

set workdir @WD
include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force


matrix m = ones(2,1)
m[1] = NA
if ok(fc_interval_width(m, 0.9)[1]) != 0
    stop
endif
if !(fc_interval_width(m, 0.9)[2] >= 1.644 && fc_interval_width(m, 0.9)[2] <= 1.6449)
    # approximate exact floating number
    stop
endif


bundle b = defbundle("which", "rw", "level", 0.9)
strings S = gen_column_names(&b)
if nelem(S) != 3
    stop
endif
if S[1] != "rw" || S[2] != "Lo (5.0)" || S[3] != "Up (95.0)"
    stop
endif

bundle b = defbundle("which", "avgfc", "level", 0.9)
strings S = gen_column_names(&b)
if nelem(S) != 1
    stop
endif
if S[1] != "avgfc"
    stop
endif


strings S = array_of_horizon_labels(2)
if S[1] != " h=1" || S[2] != " h=2"
    stop
endif

open denmark.gdt -q -p
strings S = get_dates_forecasted("1980:1", 2)
if S[1] != "1980:2" && S[2] != "1980:3"
    stop
endif

open hendry_jae.gdt -q -p
strings S = get_dates_forecasted("1899", 2)
if S[1] != "1900" && S[2] != "1901"
    stop
endif

open hamilton.gdt -q -p
strings S = get_dates_forecasted("1982:07", 2)
if S[1] != "1982:08" && S[2] != "1982:09"
    stop
endif

open djclose.gdt -q -p
strings S = get_dates_forecasted("1982-07-30", 2)
if S[1] != "1982-08-02" && S[2] != "1982-08-02"
    stop
endif


strings Sin = defarray("A", "B", "C")
strings S = drop_string_from_array(Sin, "A")
if nelem(S) != 2
    stop
endif
if S[1] != "B" && S[3] != "C"
    stop
endif


bundle Bret = set_bundle(djclose, "avg", defbundle("horizon", 7, "level", \
  0.05, "type_moving_window", "rolling"))
if Bret.horizon != 7 || Bret.level != 0.05 || Bret.type_moving_window != "rolling" || \
    Bret.name_endo != "djclose"
    stop
endif


if nelem(get_supported_nonseas_methods()) != 7
    stop
endif
if get_supported_nonseas_methods()[1] != "meanfc" || \
  get_supported_nonseas_methods()[2] != "medianfc" || \
  get_supported_nonseas_methods()[3] != "rwfc" || \
  get_supported_nonseas_methods()[4] != "rwdriftfc" || \
  get_supported_nonseas_methods()[5] != "ar1fc" || \
  get_supported_nonseas_methods()[6] != "ar1trendfc" || \
  get_supported_nonseas_methods()[7] != "avgfc"
  
    stop
endif


if get_supported_seas_methods()[1] != "smeanfc" || \
  get_supported_seas_methods()[2] != "smedianfc" || \
  get_supported_seas_methods()[3] != "snaivefc" || \
  get_supported_seas_methods()[4] != "snaivedriftfc" 
  
    stop
endif


bundle B = defbundle("is_seas", 0)
methods_to_apply(&B)
if nelem(B.methods_used) != 6
    stop
endif

bundle B = defbundle("is_seas", 1)
methods_to_apply(&B)
if nelem(B.methods_used) != 10
    stop
endif



bundle B = defbundle("is_seas", 0)
prepare_result_matrices(&B)
if nelem(B) != 8
    stop
endif
if nelem(B.fc_results_medianfc) != 3
    stop
endif

bundle B = defbundle("is_seas", 1)
prepare_result_matrices(&B)
if nelem(B) != 12
    stop
endif
if nelem(B.fc_results_snaivefc) != 3
    stop
endif




print "passed"
stop




# do_naive_forecasting
# drop_missing_values
# nobs_to_add_to_dataset
# summarize_naive_fc_results

/* Function not finisched yet!
matrix m = mshape(seq(1,9)',3,2)
matrices M = defarray(m)
bundle B = get_mean_fc_and_mean_sd(M)
B
eval B.fc_point_avg
*/


printf "\nInfo: All tests passed.\n"


