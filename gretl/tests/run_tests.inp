set verbose off
clear

#string FILENAME = "foo.csv"		# dummy file

include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force

include string_utils.gfn
include assertion.gfn


function void test_prepare_forecast_bundles (void)
    print "Start with prepare_forecast_bundles()"

    scalar is_seas = 1    
    bundle b = defbundle("estimator_names", get_estimator_names(is_seas))
    prepare_forecast_bundles(&b)
    bundle fc = b.forecast_results
    bundle fc1 = fc.snaivefc
    
    assert_true(inbundle(fc,   snaivefc))
    assert_equal_num(nelem(fc), 10)
    assert_equal_num(nelem(fc1), 3)
end function


function void test_fc_interval_width (void)
    print "Start with fc_interval_width()"

    matrix m = ones(2,1)
    m[1] = NA

    matrix y = fc_interval_width(m, 0.9)

    assert_false(ok(y[1]))
    assert_almost_equal_num(y[2], 1.644, 1e-3)
end function


function void test_gen_column_names (void)
    print "Start with gen_column_names()"

    bundle b = defbundle("which", "rw", "level", 0.9)
    strings S = gen_column_names(&b)
    assert_equal_num(nelem(S), 3)
    assert_equal_str(S[1], "rw")
    assert_equal_str(S[2], "Lo (5.0)")
    assert_equal_str(S[3], "Up (95.0)")

    bundle b = defbundle("which", "avgfc", "level", 0.9)
    strings S = gen_column_names(&b)
    assert_equal_num(nelem(S), 1)
    assert_equal_str(S[1], "avgfc")
end function


function void test_array_of_horizon_labels (void)
    print "Start with array_of_horizon_labels()"

    strings S = array_of_horizon_labels(2)
    assert_equal_str(S[1], " h=1")
    assert_equal_str(S[2], " h=2")
end function


# NOTE: 'open' cannot be used inside functions
open denmark.gdt -q -p
function void test_get_dates_forecasted_q (void)
    print "Start with get_dates_forecasted() quarterly"

    strings S = get_dates_forecasted("1980:1", 2)
    assert_equal_str(S[1], "1980:2")
    assert_equal_str(S[2], "1980:3")
end function
test_get_dates_forecasted_q()

open hendry_jae.gdt -q -p
function void test_get_dates_forecasted_a (void)
    print "Start with get_dates_forecasted() annual"

    strings S = get_dates_forecasted("1899", 2)
    assert_equal_str(S[1], "1900")
    assert_equal_str(S[2], "1901")
end function
test_get_dates_forecasted_a()

open hamilton.gdt -q -p
function void test_get_dates_forecasted_m (void)
    print "Start with get_dates_forecasted() monthly"

    strings S = get_dates_forecasted("1982:07", 2)
    assert_equal_str(S[1], "1982:08")
    assert_equal_str(S[2], "1982:09")
end function
test_get_dates_forecasted_m()


open djclose.gdt -q -p
function void test_get_dates_forecasted_d (void)
    print "Start with get_dates_forecasted() daily"

    strings S = get_dates_forecasted("1982-07-30", 2)
    assert_equal_str(S[1], "1982-08-02")
    assert_equal_str(S[2], "1982-08-03")
end function
test_get_dates_forecasted_d()


function void test_set_bundle (const series djclose)
    print "Start with set_bundle()"

    bundle Bret = set_bundle(djclose, "avg", \
      defbundle("horizon", 7, "level", \
      0.05, "type_moving_window", "rolling"))

    assert_equal_num(Bret.horizon, 7)
    assert_equal_num(Bret.level, 0.05)
    assert_equal_str(Bret.type_moving_window, "rolling")
    assert_equal_str(Bret.name_endo, "djclose")
    

    bundle Bret = set_bundle(djclose, "avg")
    assert_equal_num(Bret.horizon, 10)
    assert_equal_num(Bret.level, 0.9)
    assert_equal_str(Bret.type_moving_window, "static")
    assert_equal_str(Bret.name_endo, "djclose")
end function

function void test_get_supported_ns_methods (void)
    print "Start with get_supported_nonseas_methods()"

    strings S = get_supported_nonseas_methods()
    assert_equal_num(nelem(S), 7)

    assert_equal_str(S[1], "meanfc")
    assert_equal_str(S[2], "medianfc")
    assert_equal_str(S[3], "rwfc")
    assert_equal_str(S[4], "rwdriftfc")
    assert_equal_str(S[5], "ar1fc")
    assert_equal_str(S[6], "ar1trendfc")
    assert_equal_str(S[7], "avgfc")
end function


function void test_get_supported_seas_methods (void)
    print "Start with get_supported_seas_methods()"

    strings S = get_supported_seas_methods()

    assert_equal_str(S[1], "smeanfc")
    assert_equal_str(S[2], "smedianfc")
    assert_equal_str(S[3], "snaivefc")
    assert_equal_str(S[4], "snaivedriftfc")
end function


function void test_get_estimator_names (void)
    print "Start with get_estimator_names()"

    scalar is_seas = 0
    strings S = get_estimator_names(is_seas)
    assert_equal_num(nelem(S), 6)

    scalar is_seas = 1
    strings S = get_estimator_names(is_seas)
    assert_equal_num(nelem(S), 10)
end function


function void test_prepare_forecast_bundles (void)
    print "Start with prepare_forecast_bundles()"

    bundle B = defbundle("is_seas", 0, \
      "estimator_names", get_supported_nonseas_methods())
    bundle Bout = prepare_forecast_bundles(&B)

    assert_equal_num(nelem(Bout), 7)
    assert_equal_num(nelem(Bout.rwfc), 3)
end function


# As 'nulldata' command is applied below, we call some tests already here
test_prepare_forecast_bundles()
test_fc_interval_width()
test_gen_column_names()
test_array_of_horizon_labels()
test_set_bundle(djclose)
test_get_supported_ns_methods()
test_get_supported_seas_methods()
test_get_estimator_names()


nulldata 24 -p
setobs 1 1 --time-series
function void test_get_highest_pd_series_a (void)
    print "Start with get_highest_period_series() annual"

    series ser = get_highest_period_series()
    assert_equal_num(min(ser), 1)
    assert_equal_num(max(ser), 24)
end function
test_get_highest_pd_series_a()

setobs 4 2000:1 --time-series
function void test_get_highest_pd_series_q (void)
    print "Start with get_highest_period_series() quarterly"

    series ser = get_highest_period_series()
    assert_equal_num(min(ser), 1)
    assert_equal_num(max(ser), 4)
end function
test_get_highest_pd_series_q()

setobs 5 2000-01-01 --time-series
function void test_get_highest_pd_series_bd (void)
    print "Start with get_highest_period_series() bdaily"

    series ser = get_highest_period_series()
    assert_equal_num(ser[1], 3)
    assert_equal_num(min(ser), 1)
    assert_equal_num(max(ser), 31)
end function
test_get_highest_pd_series_bd()

nulldata 40 -p
setobs 7 2000-01-01 --time-series
function void test_get_highest_pd_series_d (void)
    print "Start with get_highest_period_series() daily"

    series ser = get_highest_period_series()
    assert_equal_num(min(ser), 1)
    assert_equal_num(max(ser), 31)
end function
test_get_highest_pd_series_d()


nulldata 400 -p
setobs 12 2000:01 --time-series
function void test_get_highest_pd_series_m (void)
    print "Start with get_highest_period_series() monthly"
    series ser = get_highest_period_series()
    assert_equal_num(min(ser), 1)
    assert_equal_num(max(ser), 12)
end function
test_get_highest_pd_series_m()


print "Start with add_ohe_periods_to_list()"
nulldata 40 -p
setobs 7 2000-01-01 --time-series
function void test_add_ohe_periods_to_list (void)
    print "Start with add_ohe_periods_to_list()"

    list L = null
    list L += add_ohe_periods_to_list("smeanfc")
    assert_equal_num(nelem(L), 30)
    
    list L = null
    list L += add_ohe_periods_to_list("smedianfc")
    assert_equal_num(nelem(L), 30)
    
    list L = null
    list L += add_ohe_periods_to_list("foo")
    assert_false(nelem(L))
end function


function void test_add_linear_trend_to_list (void)
    print "Start with add_linear_trend_to_list()"

    list L = null
    bundle B = defbundle("with_trend", 1)
    list L += add_linear_trend_to_list(&B, "ar1trendfc")
    assert_false(nelem(L))

    list L = null
    bundle B = defbundle("with_linear_trend", 1)
    list L += add_linear_trend_to_list(&B, "ar1trendfc")
    assert_equal_num(nelem(L), 1)

    list L = null
    bundle B = defbundle("with_linear_trend", 1)
    L += add_linear_trend_to_list(&B, "foo")
    assert_false(nelem(L))
end function


function void test_add_intercept_to_list (void)
    print "Start with add_intercept_to_list()"

    list L = null
    L += add_intercept_to_list("rwfc")
    assert_equal_num(nelem(L), 1)
    
    list L = null
    L += add_intercept_to_list("rwdriftfc")
    assert_equal_num(nelem(L), 1)

    list L = null
    L += add_intercept_to_list("foo")
    assert_equal_num(nelem(L), 1)
end function

test_add_ohe_periods_to_list()
test_add_linear_trend_to_list()
test_add_intercept_to_list()


nulldata 40 -p
setobs 7 2000-01-01 --time-series
function void test_get_train_start_end_obs_d (void)
    print "Start with get_train_start_end_obsnums() daily"

    bundle B = null
    string B.t1_label = "2000-01-01"
    string B.t2_label = "2000-01-31"
    scalar B.horizon = 2
    string B.type_moving_window = "static"

    bundle Bret = get_train_start_end_obsnums(&B)

    assert_equal_num(nelem(Bret), 2)
    assert_true(inbundle(Bret, "t1_obsnum"))
    assert_true(inbundle(Bret, "t2_obsnum"))
    assert_equal_num(Bret.t1_obsnum, 1)
    assert_equal_num(Bret.t2_obsnum, 31)

    string B.t1_label = "2000-01-02"
    string B.t2_label = "2000-02-03"
    bundle Bret = get_train_start_end_obsnums(&B)
    assert_equal_num(Bret.t1_obsnum, 2)
    assert_equal_num(Bret.t2_obsnum, 34)
end function
test_get_train_start_end_obs_d()


nulldata 7 -p
setobs 7 2000-01-01 --time-series
function void test_get_train_start_end_obs_dd (void)
    print "Start with get_train_start_end_obsnums() daily"

    bundle B = null
    scalar B.horizon = 2
    string B.type_moving_window = "rolling"
    scalar B.window_length = 5

    bundle Bret = get_train_start_end_obsnums(&B)

    assert_equal_num(nelem(Bret), 2)
    assert_true(inbundle(Bret, "t1_obsnum"))
    assert_true(inbundle(Bret, "t2_obsnum"))
    assert_equal_num(Bret.t1_obsnum, 1)
    assert_equal_num(Bret.t2_obsnum, 5)

    scalar B.window_length = 8
    bundle Bret = get_train_start_end_obsnums(&B)
    assert_equal_num(Bret.t1_obsnum, -2)
    assert_equal_num(Bret.t2_obsnum, 5)
end function
test_get_train_start_end_obs_dd()



nulldata 7 -p
setobs 7 2000-01-01 --time-series
function void test_nobs_to_add_to_dataset (void)
    print "Start with nobs_to_add_to_dataset()"
    
    series s1 = normal()
    series s2 = s1
    series s3 = s1
    series s4 = s1
    s2[1] = NA
    s3[7] = NA
    s4[1] = NA
    s4[7] = NA
    bundle B = defbundle("horizon", 2)
    
    list L = s1
    assert_equal_num(nobs_to_add_to_dataset(L, B.horizon), 2)
    
    list L = s2
    assert_equal_num(nobs_to_add_to_dataset(L, B.horizon), 2)
    
    list L = s3
    assert_equal_num(nobs_to_add_to_dataset(L, B.horizon), 1)

    list L = s4
    assert_equal_num(nobs_to_add_to_dataset(L, B.horizon), 1)
end function
test_nobs_to_add_to_dataset()



nulldata 7 -p
setobs 7 2000-01-01 --time-series
function void test_diff_t2_of_y_and_x (void)
    print "Start with diff_nobs_of_y_and_x()"

    series s1 = normal()    
    series s2 = s1
    series s3 = s1
    series s4 = s1
    s2[1] = NA
    s3[7] = NA
    s4[1] = NA
    s4[7] = NA
    
    list L = s1
    scalar s = diff_t2_of_y_and_x(s1, L)
    assert_equal_num(s, 0)
    
    list L = s2
    scalar s = diff_t2_of_y_and_x(s1, L)
    assert_equal_num(s, 0)

    list L = s3
    scalar s = diff_t2_of_y_and_x(s1, L)
    assert_equal_num(s, -1)
    
    list L = s4
    scalar s = diff_t2_of_y_and_x(s1, L)
    assert_equal_num(s, -1)

    list L = s4
    scalar s = diff_t2_of_y_and_x(s3, L)
    assert_equal_num(s, 0)
end function
test_diff_t2_of_y_and_x()


printf "\nInfo: All tests passed.\n"

# do_naive_forecasting
# do_initial_checks
# drop_missing_values
# nobs_to_add_to_dataset
# summarize_naive_fc_results

/* Function not finisched yet!
   matrix m = mshape(seq(1,9)',3,2)
   matrices M = defarray(m)
   bundle B = get_mean_fc_and_mean_sd(M)
   B
   eval B.fc_point_avg
*/


