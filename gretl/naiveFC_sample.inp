clear
set verbose off

#include naiveFC.gfn --force				# TODO:

# Select an example
#==================
scalar runEX = 2

# Load data
if runEX==1
    open nysewk.gdt -q		# weekly
    series y = close
elif runEX==2
    open AWM.gdt -q			# quarterly
    series y = YGA
elif runEX==3
    open hendry_jae.gdt -q	# annual
    series y = diff(gdp)
elif runEX==4
    open hall.gdt -q		# monthly
    series y = ewr
endif

#=======================
# Static naive forecasts
#=======================
/*
# Forecast combination
# smpl ; -1					# FIXME: In case the dataset is restricted, internal addobs does not work!
bundle b = null
b = naiveFC(y, "avgFC")				# compute forecasts
print b
matrix fc_method1_lb = b.forecasts_lower_bound[2]
fc_method1_lb
naivePlot(&b)						# plot forecast results
stop

# Forecast combination but up to h=15 forecast periods
bundle opt = null					# set specific options
scalar opt.horizon = 10
#list opt.xlist = D743 FDD			# list of additional regressors for conditioning on (must have at least 'h' future valid obs!)
bundle b = naiveFC(y, "avgFC", opt)
matrix fc_avgfc_pt = b.forecasts_point[10]
b.preobs_fc = 15					# optional: set no. of pre.-forecast periods obs. to plot
naivePlot(&b)

# Mean forecast
bundle opt = null					# set specific options
scalar opt.horizon = 10
bundle b = naiveFC(y, "meanFC", opt)
print b
eval b.forecasts_point[1]
stop
naivePlot(&b)
eval b.fc

# Median forecast
bundle b = naiveFC(y, "medianFC", opt)
eval b.forecasts_point[1]

naivePlot(&b)
eval b.fc

# Random-Walk
bundle b = naiveFC(y, "rwFC", opt)
eval b.forecasts_point[1]
naivePlot(&b)
eval b.fc

# Random-Walk + Drift
bundle b = naiveFC(y, "rwdriftFC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc

# AR(1)
bundle b = naiveFC(y, "ar1FC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc

# AR(1) + Trend
bundle b = naiveFC(y, "ar1trendFC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc

# Seasonal mean
bundle b = naiveFC(y, "smeanFC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc

# Seasonal median
bundle b = naiveFC(y, "smedianFC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc

# Seasonal naive without drift
bundle b = naiveFC(y, "snaiveFC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc

# Seasonal naive with drift
bundle b = naiveFC(y, "snaivedriftFC", opt)
eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
naivePlot(&b)
eval b.fc
*/

#/* ACTIVATE IF WANTED: may take a while
#=========================
# Moving-window forecasts
#=========================
bundle opts = null					# setup additional options
opts.type_moving_window = "rolling" 			# "rolling" / "recursive" -> type of moving-window forecasting  (optional)
opts.window_length = 500 #xmax($pd, 80) 			# moving window length (optional)
catch list opts.xlist = D743 FDD			# optional additional regressors
#opts.verbose = 0					# Don't print details (optional)

# Select methods
strings methods = defarray("meanFC") #, "medianFC", "rwFC", "rwdriftFC", "smeanFC", "smedianFC", "snaiveFC", \
#  "snaivedriftFC", "ar1FC", "ar1trendFC")
loop i=1..nelem(methods) -q
    bundle b = null
    bundle b = naiveFC(y, methods[i], opts)
    eval b.forecasts_point[1]
    stop
    
    # Plot (optional)
    b.preobs_fc = 5					# set no. of pre.-forecast periods obs. to plot
    naivePlot(&b)
endloop

*/
