clear
set verbose off

#include naiveFC.gfn --force				# TODO:

string WD = "/home/at/git/naiveFC/gretl"
set workdir @WD

# TODO: can be dropped once gfn compiled
include string_utils.gfn			# already added to spec
include CvDataSplitter.gfn			# already added to spec


include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force



# Select an example
#==================
scalar runEX = 2

# Load data
if runEX==1
    open nysewk.gdt -q		# weekly
    series y = close
elif runEX==2
    open AWM.gdt -q			# quarterly
    series y = YGA
    smpl y --no-missing --permanent
elif runEX==3
    open hendry_jae.gdt -q	# annual
    series y = diff(gdp)
elif runEX==4
    open hall.gdt -q		# monthly
    series y = ewr

elif runEX == 5
    string FILENAME = "opaf_daily.csv"
    open "./tests/opaf_daily.gdt" -p -q
    series y = ANSPRACHE_BEREINIGT
endif

#=======================
# Static naive forecasts
#=======================
/*
   # Forecast combination
   # smpl ; -1					# FIXME: In case the dataset is restricted, internal addobs does not work!
   bundle b = null
   b = naiveFC(y, "avgFC")				# compute forecasts
   print b
   matrix fc_method1_lb = b.forecasts_lower_bound[2]
   fc_method1_lb
   naivePlot(&b)						# plot forecast results
   stop

   # Forecast combination but up to h=15 forecast periods
   bundle opt = null					# set specific options
   scalar opt.horizon = 10
   #list opt.xlist = D743 FDD			# list of additional regressors for conditioning on (must have at least 'h' future valid obs!)
   bundle b = naiveFC(y, "avgFC", opt)
   matrix fc_avgfc_pt = b.forecasts_point[10]
   b.pre_fc_periods_to_plot = 15					# optional: set no. of pre.-forecast periods obs. to plot
   naivePlot(&b)

   # Mean forecast
   bundle opt = null					# set specific options
   scalar opt.horizon = 10
   bundle b = naiveFC(y, "meanFC", opt)
   print b
   eval b.forecasts_point[1]
   stop
   naivePlot(&b)
   eval b.fc

   # Median forecast
   bundle b = naiveFC(y, "medianFC", opt)
   eval b.forecasts_point[1]

   naivePlot(&b)
   eval b.fc

   # Random-Walk
   bundle b = naiveFC(y, "rwFC", opt)
   eval b.forecasts_point[1]
   naivePlot(&b)
   eval b.fc

   # Random-Walk + Drift
   bundle b = naiveFC(y, "rwdriftFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # AR(1)
   bundle b = naiveFC(y, "ar1FC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # AR(1) + Trend
   bundle b = naiveFC(y, "ar1trendFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal mean
   bundle b = naiveFC(y, "smeanFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal median
   bundle b = naiveFC(y, "smedianFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal naive without drift
   bundle b = naiveFC(y, "snaiveFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal naive with drift
   bundle b = naiveFC(y, "snaivedriftFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc
*/

#/* ACTIVATE IF WANTED: may take a while
#=========================
# Moving-window forecasts
#=========================
scalar horizon = 10
bundle opts = null					# setup additional options
opts.horizon = horizon
opts.type_moving_window = "rolling" 			# "rolling" / "recursive" -> type of moving-window forecasting  (optional)
# opts.window_length = xmax($pd, 90) 			# moving window length (optional)
# opts.window_length = $tmax
# catch list opts.xlist = D743 FDD			# optional additional regressors
opts.verbose = 1					# Don't print details (optional)

# Select method - dim = 11
strings methods = defarray("meanFC", "medianFC", "rwFC", "rwdriftFC", \
  "smeanFC", "smedianFC", "snaiveFC", "snaivedriftFC", "ar1FC", "ar1trendFC", "avgfc")

bundle b = null
bundle b = naiveFC(y, methods[5], opts)
b
forecast_results = b.forecast_results
eval forecast_results.smeanfc
eval forecast_results.smeanfc.forecasts_point
stop

# Get interval forecasts as series
dataset addobs opts.horizon			# forecast may exceed current sample length
list FC = getNaiveForecastsList(&b, {1,2}, "_suffix")

# Plot (optional)
#b.pre_fc_periods_to_plot = 20					# set no. of pre.-forecast periods obs. to plot
naivePlot(&b, {11})

*/
