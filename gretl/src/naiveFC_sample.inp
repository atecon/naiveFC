clear
set verbose off

include StrucTiSM.gfn
#include naiveFC.gfn --force				# TODO:

if $sysinfo.hostname == "dsb"
    string WD = "/home/ninja/repo/naiveFC/gretl"
else
    string WD = "/home/at/git/naiveFC/gretl"
endif
set workdir @WD

# TODO: can be dropped once gfn compiled
include string_utils.gfn			# already added to spec
include CvDataSplitter.gfn			# already added to spec
include extra.gfn					# already added to spec

include "./src/naiveFC.inp" --force
include "./src/naiveFC_helper.inp" --force


# Load data
#open AWM.gdt -q
#series y = GCR_YER * 100

open "../tests/daily_data.gdt" -q
series y = target

#=======================
# Static naive forecasts
#=======================
/*
   # Forecast combination
   # smpl ; -1					# FIXME: In case the dataset is restricted, internal addobs does not work!
   bundle b = null
   b = naiveFC(y, "avgFC")				# compute forecasts
   print b
   matrix fc_method1_lb = b.forecasts_lower_bound[2]
   fc_method1_lb
   naivePlot(&b)						# plot forecast results
   stop

   # Forecast combination but up to h=15 forecast periods
   bundle opt = null					# set specific options
   scalar opt.horizon = 10
   #list opt.xlist = D743 FDD			# list of additional regressors for conditioning on (must have at least 'h' future valid obs!)
   bundle b = naiveFC(y, "avgFC", opt)
   matrix fc_avgfc_pt = b.forecasts_point[10]
   b.pre_fc_periods_to_plot = 15					# optional: set no. of pre.-forecast periods obs. to plot
   naivePlot(&b)

   # Mean forecast
   bundle opt = null					# set specific options
   scalar opt.horizon = 10
   bundle b = naiveFC(y, "meanFC", opt)
   print b
   eval b.forecasts_point[1]
   stop
   naivePlot(&b)
   eval b.fc

   # Median forecast
   bundle b = naiveFC(y, "medianFC", opt)
   eval b.forecasts_point[1]

   naivePlot(&b)
   eval b.fc

   # Random-Walk
   bundle b = naiveFC(y, "rwFC", opt)
   eval b.forecasts_point[1]
   naivePlot(&b)
   eval b.fc

   # Random-Walk + Drift
   bundle b = naiveFC(y, "rwdriftFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # AR(1)
   bundle b = naiveFC(y, "ar1FC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # AR(1) + Trend
   bundle b = naiveFC(y, "ar1trendFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal mean
   bundle b = naiveFC(y, "smeanFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal median
   bundle b = naiveFC(y, "smedianFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal naive without drift
   bundle b = naiveFC(y, "snaiveFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc

   # Seasonal naive with drift
   bundle b = naiveFC(y, "snaivedriftFC", opt)
   eval b.forecasts_lower_bound[1] ~ b.forecasts_point[1] ~ b.forecasts_upper_bound[1]
   naivePlot(&b)
   eval b.fc
*/

#/* ACTIVATE IF WANTED: may take a while
#=========================
# Moving-window forecasts
#=========================
bundle opts = null					# setup additional options
opts.horizon = 10
opts.type_moving_window = "rolling" #/ "recursive" -> type of moving-window forecasting  (optional)
scalar opts.endogenous_in_logs = TRUE
opts.window_length = 700 #xmax($pd, 90) 	# moving window length (optional)
# opts.window_length = $tmax
catch list opts.xlist = budget #D743 FDD		# optional additional regressors
opts.verbose = 1						# print details (optional)

# TODO: in case of moving-window fc, xlist does not need to have additional oos valid data
# TODO as we forecast only to the last valid obs of y in this case anyway!
# FIXME: moving-window fc with "avgfc"

strings methods = defarray("lltfc", "bsmfc", "airlinefc",\
                           "ar1ma1fc", "meanFC", "medianFC", "rwFC", "rwdriftFC",\
                           "smeanFC", "smedianFC", "snaiveFC", "snaivedriftFC",\
                           "ar1FC", "ar1trendFC", "avgfc")

bundle b = null
bundle b = naiveFC(y, methods[9], opts)
b
bundle forecast_results = b.forecast_results

#eval forecast_results.smeanfc
#eval forecast_results.smeanfc.forecasts_point

bundle FcStacked = get_naive_forecasts_stacked(b, {1,2})
matrix fcvalues = FcStacked.smeanfc
printf "%16.0f\n", fcvalues


list FC = get_naive_forecasts(b, {1,2})

b.pre_fc_periods_to_plot = 60					# set no. of pre.-forecast periods obs. to plot
plot_naive_forecasts(b, {1}, b.which)
