function bundle dict_models (void)
/* Dictionary including stuff for calling estimation
    command and fcast command. */

    bundle dict_models

    dict_models.meanfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "ols y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.medianfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "quantreg 0.5 y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.smeanfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "ols y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 1 \
      )
    dict_models.smedianfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "quantreg 0.5 y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 1 \
      )
    dict_models.snaivefc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 0 0 ; 0 1 0 ; y xlist --nc", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.snaivedriftfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 0 0 ; 0 1 0 ; y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.rwfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 1 0 ; y xlist --nc", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 0, \
      "add_ohe_periods", 0 \
      )
    dict_models.rwdriftfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 1 0 ; y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 0, \
      "add_ohe_periods", 0 \
      )
    dict_models.ar1fc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "ols y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 1, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.ar1trendfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "ols y xlist", \
      "add_linear_trend", 1, \
      "add_first_lag", 1, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )

    return dict_models
end function


function bundle default_values (const series y)
    /* Set default values */

    bundle self = null
    scalar self.error = 0
    list self.xlist = null
    scalar self.horizon = 10				# maximum forecast horizon
    scalar self.level = 0.9					# probability level for forecast interval
    scalar self.fan = 0						# plot fan chart  (not supported yet)
    scalar self.nboot = 0					# no. of bootstrap replications  (not supported yet)
    scalar self.blength = 4					# Block length bootstrap  (not supported yet)
    scalar self.is_seas = data_has_seasonality()
    strings self.supported_estimators = get_estimator_names(self.is_seas)
    scalar self.verbose = 1

    genr index
    series self.index = index

    string self.type_moving_window = "static" 			# "static", "rolling" or "recursive"
    scalar self.window_length = ceil(0.25 * nobs(y))	# default window length for moving-windows

    # For naivePlot()
    string self.title = ""
    string self.ylab = ""
    string self.xlab = ""
    string self.filename = "display"
    scalar self.pre_fc_periods_to_plot = int(0.25 * nobs(y))

    return self
end function



# TODO: untested
function list prepare_xlist (const bundle model_settings,
                             const bundle self)
    /* Prepare list of additional regressors. */

    list xlist = null

    if model_settings.add_ohe_periods
        xlist += add_ohe_periods_to_list()
    endif
    if model_settings.add_intercept
        xlist += add_intercept_to_list()
    endif
    if model_settings.add_linear_trend
        xlist += add_linear_trend_to_list()
    endif

    if inbundle(self, "xlist")
        xlist += self.xlist
    endif

    # TODO: check for duplicates in xlist

    return xlist
end function


# TODO: untested
function matrix set_xlist_and_forecast (bundle *self)
/* Set list of regressors, estimate model and compute
    point forecast and forecast standard errors. */

    bundle model_settings = dict_models()[self.active_model]
    string fcast_arg = model_settings.forecast_arg
    string command = model_settings.command
    # TODO: consider 3 verbose levels: silent, normal, detailed
    if self.verbose < 2
        command += " --quiet"	# estimation details only for detailed verbosity level
        fcast_arg += " --quiet"
    endif
    matrix forecast_results = zeros(self.horizon, 2) * NA
    series y = self.y					# length: window_length + horizon

    # "(train_obsnums.t2_obsnum - train_obsnums.t1_obsnum)"
    # is not the effective sample length but (window_length-max(lags))
    bundle train_obsnums = get_train_start_end_obsnums(self)
    bundle test_obsnums = get_test_start_end_obsnums(train_obsnums, self)

    list xlist = prepare_xlist(model_settings, self)
    if model_settings.add_first_lag
        xlist += y(-1)
    endif

    catch smpl train_obsnums.t1_obsnum train_obsnums.t2_obsnum

    if $error
        printError("Failed to set training sample. Check your sample and window size.")
        scalar self.error = 1
        return forecast_results
    endif

    # TODO: Can this happen, and if so why -- otherwise drop
    if self.type_moving_window != "static" && ($nobs > self.window_length)
        printError(sprintf("You training sample (T=%d) is longer than the\n\
          specified window length (T=%d).", $nobs, self.window_length))

        scalar self.error = 1
        return forecast_results
    endif

    self.error = estimate_model_and_forecast(command, fcast_arg, y, \
      xlist, train_obsnums, test_obsnums)

    forecast_results[1:self.horizon_current,] = $fcast ~ $fcse

    return forecast_results
end function


# TODO: put checks into separate functions
function void do_initial_checks (bundle *self)
    /* Helper function perfoming some initial checks */

    pkg query extra --quiet
    # FIXME: This fails
    /*
       if atof($result.version) < 0.6
       printError("You need at least version 0.6 of the 'extra' package.")
       printError("Update by executing 'pkg install extra'")
       endif
    */

    strings methods = get_supported_nonseas_methods()
    strings seas_methods = get_supported_seas_methods()

    # Check whether called method exists
    if !nelem(strpos(methods, self.which)) && !nelem(strpos(seas_methods, self.which))
        printError("The forecasting method you selected does not exist.")
        self.error = 1
    endif

    if !self.is_seas && nelem(strpos(seas_methods, self.which))
        printError("The method you requested is not available for non-seasonal data.")
        self.error = 1
    endif

    if self.window_length < $pd
        printError("Periodicity cannot be negative.")
        printError(sprintf("Window size = %d", self.window_length))
        printError(sprintf("Periodicity = %d\n", $pd))
        printError("The size of the moving window cannot be smaller than the underlying periodicity.")
        self.error = 1
    endif

    if self.nboot
        print_no_bootstrap_support()
        self.error = 1
    endif

    if nelem(self.xlist) > 0 \
          && (self.which == "rwfc" || self.which == "rwdriftfc" || self.which == "snaivefc" || self.which == "snaivedriftfc")

        printError(sprintf("No exogenous variables can be included for the selected model '%s'.", self.which))
        self.error = 1
    endif
end function


# TODO: untested
function void t1_and_t2_of_y_and_xlist (const series y,
                                        bundle *self)
    /* Check valid start and end dates of y and xlist. */

    list xlist = self.xlist
    scalar t1_curr = $t1
    scalar t2_curr = $tmax
    bundle obsdetails_y
    bundle obsdetails_x

    obslabels_and_nobs_to_bundle(y, &obsdetails_y)
    string self.t1_date_y = obsdetails_y.t1_date
    string self.t2_date_y = \
      obslabel(obsnum(obsdetails_y.t2_date) - self.n_sampleend_obs_replaced)
    scalar self.t1_obsnum_y = obsnum(self.t1_date_y)
    scalar self.t2_obsnum_y = obsnum(self.t2_date_y)

    scalar t1_diff_y = self.t1_obsnum_y - t1_curr
    scalar t2_diff_y = t2_curr - self.t2_obsnum_y

    if t1_diff_y > 0
        printWarning(sprintf("Found %d missing initial observations for %s.", \
          t1_diff_y, self.name_endo))
    endif

    if nelem(xlist)
        obslabels_and_nobs_to_bundle(xlist, &obsdetails_x)
        scalar self.t1_obsnum_xlist = obsnum(obsdetails_x.t1_date)
        scalar self.t2_obsnum_xlist = obsnum(obsdetails_x.t2_date)
        string self.t1_date_xlist = obsdetails_x.t1_date
        string self.t2_date_xlist = obsdetails_x.t2_date
        scalar t1_diff_x = self.t1_obsnum_xlist - t1_curr
        scalar t2_diff_x = t2_curr - self.t2_obsnum_xlist

        if t1_diff_x > 0
            printWarning(sprintf("Found %d missing initial observations for exogenous.",\
              t1_diff_x))
        endif
        if t2_diff_x > 0
            printWarning(sprintf("Found %d missing observations at sample end for exogenous.",\
              t2_diff_x))
        endif
    endif
end function


function bundle naiveFC (const series y,
                         string which "Select forecasting method",
                         bundle opts[null] "Bundle incl. optional parameters")
    /* Main package function */

    if !exists(opts)
        bundle opts = null
    endif
    bundle self = set_bundle(y, which, opts)

    do_initial_checks(&self)	# TODO: return scalar capturing error!
    if self.error
        return self
    endif

    # Replace of missing at the sample end
    # must be done here before 't1_and_t2_of_y_and_xlist'
    self.n_sampleend_obs_replaced = repl_sampleend_missings_of_y(&y, self.verbose)

    t1_and_t2_of_y_and_xlist(y, &self)

    if self.type_moving_window == "static"
        # "self.t2_date_y" refers to in-sample end date of "y"
        scalar self.window_length = smplspan(self.t1_date_y, self.t2_date_y, $pd)
    endif

    scalar check = valid_dates_of_y_and_xlist(&self)
    if check
        printError("Problem with dating for y and/ or xlist.")
        return self
    endif

    scalar check = sufficient_future_obs(&self)
    if check
        return self
    endif

    smpl obsnum(self.t1_date_y) get_sample_end(self)		# get_sample_end(self) = in-sample end plus max(horizon)
    series self.y = y

    do_naive_forecasting(&self)

    if self.which == "avgfc"
        self.forecast_results.avgfc = compute_avgerage_forecast(&self)
    endif

    summarize_naive_fc_results(&self)
    cleanup_bundle(&self)

    return self
end function


function void cleanup_bundle (bundle *self)
    /* Delete some elements before returning to user. */

    delete self.fan
    delete self.blength
    delete self.nboot
    if inbundle(self,"obs_season")
        delete self.obs_season
    endif
    delete self.supported_estimators
    delete self.index
    delete self.active_model
    delete self.horizon_current
    delete self.t1_date_y
    delete self.t2_date_y
    delete self.xlist
end function


function bundle prepare_forecast_bundles (bundle *self)
/* Prepare for each estimator a dictionary for point
    interval forecast results to be stored in matrices. */

    bundle forecast_results

    loop i=1..nelem(self.models) -q
        string model = self.models[i]
        bundle forecast_results["@model"] = null
    endloop

    return forecast_results
end function


function void do_naive_forecasting (bundle *self)
    /* Wrapper function actually calling procedures. */

    strings models = getkeys(self.forecast_results)

    loop i=1..nelem(self.forecast_results) -q	# loop over models
        self.active_model = models[i]

        bundle interval_forecasts = execute_forecasting(&self)

        attach_row_labels(&interval_forecasts, self)
        attach_column_labels(&interval_forecasts, self)

        self.forecast_results[self.active_model] = interval_forecasts
    endloop
end function


function void summarize_naive_fc_results (bundle *self)
    /* Print summarising information */

    if self.verbose
        printf "-------------------------------------------------------------------\n"
        printf "\t\tSummary of naive forecasting\n"
        printf "\nForecasting method: \t\t\t%s\n", self.which
        printf "Endogenous: \t\t\t\t%s\n", self.name_endo
        printf "Number of additional regressors: \t%d\n", nelem(self.xlist)
        printf "In-Sample: \t\t\t\t%s to %s (T = %d)\n", self.t1_date_y, \
          self.t2_date_y, nobs(self.y) - self.horizon
        printf "Max. forecast horizon: \t\t\t%d\n", self.horizon
        if self.type_moving_window == "static"
            printf "Last in-sample observation: \t\t%s\n", self.t2_train_date
        elif self.type_moving_window == "rolling"
            printf "Moving window length: \t\t\t%d\n", self.window_length
        else
            printf "Initial window length: \t\t\t%d\n", self.window_length
        endif
        if self.type_moving_window != "static"
            printf "Number of '%s' multi-step forecasts: %d\n", self.type_moving_window, \
              self.n_folds
            printf "First observation forecasted: \t\t%s\n", self.t1_forecast_date
            printf "Last observation forecasted: \t\t%s\n", self.t2_forecast_date
        else
            printf "First observation forecasted (h=1): \t%s\n", self.t1_forecast_date
            printf "Last observation forecasted (h=%d): \t%s\n", self.horizon, \
              self.t2_forecast_date
        endif
        if self.type_moving_window == "static"
            printf "Width forecast interval: \t\t%d pct.\n", self.level * 100
        else
        endif
        printf "-------------------------------------------------------------------\n\n"
    endif
end function


function bundle execute_forecasting (bundle *self)
/* This function estimates the point forecasts either in (i) a rolling or
    (ii) a recursive manner and stores sequences of interval forecasts. */

    bundle cv = prep_and_get_cv_folds(self)
    self.n_folds = cv.n_folds

    # Loop over training sets, run estimation and retrieve interval forecasts.
    # returns an n_folds-dimensional array comprising h by 2 (point~sderr) matrices.
    matrices collected_point_fc_and_sderr = set_model_estimate_and_forecast(&cv, &self)

    bundle forecasts_and_factors = \
      point_fc_and_factor_as_arrays(collected_point_fc_and_sderr, &self)

    # Retrieve moving-window point_forecasts from array,
    # compute forecast intervals and put stuff to bundle
    return compute_intval_forecasts(forecasts_and_factors)
end function


# TODO: untested
function bundle compute_intval_forecasts (const bundle forecasts_and_factors)
/* Generate for each model based on respective point forecasts and
    estimated standard derrors, arrays holding interval forecasts. */

    bundle interval_forecasts

    matrix interval_forecasts.forecasts_point = \
      flatten(forecasts_and_factors.point_forecasts)	# rows: horizons, cols: sample period

    matrix factors_flattened = flatten(forecasts_and_factors.factors)

    matrix interval_forecasts.forecasts_lower_bound = \
      interval_forecasts.forecasts_point .- factors_flattened

    matrix interval_forecasts.forecasts_upper_bound = \
      interval_forecasts.forecasts_point .+ factors_flattened

    return interval_forecasts
end function



# TODO: untested
function matrices set_model_estimate_and_forecast (bundle *cv, bundle *self)
/* Loop over training sets, run estimation and retrieve
    interval forecasts. */

    matrices collected_point_fc_and_sderr = array(cv.n_folds)

    loop lwin=1..cv.n_folds -q
        matrix date_idx = cv.X_train[lwin]

        # time index of the training set = self.window_length + self.horizon
        # As the last rolling samples may inlude only a sample set less than self.horizon
        # observations, we still can compute forecasts for $Ttest < self.horizon
        scalar obs_left = $tmax - maxc(date_idx[,1])
        scalar self.horizon_current = xmin(self.horizon, obs_left)

        if self.horizon_current == 0		# FIXME: Why is n_folds=81 but only n_folds=80 would work!
            break
        endif

        smpl minc(date_idx[,1]) (maxc(date_idx[,1]) + self.horizon_current)

        if lwin == 1
            # CV series holds "window_length+horizon" observations: subtract "horizon"
            self.t1_train_date = obslabel($t1)
            string self.t2_train_date = obslabel($t2 - self.horizon_current)
            string self.t1_forecast_date = obslabel($t2 - self.horizon_current + 1)	# Date of 1st h=1 ahead forecast

        elif lwin == (cv.n_folds - 1) && self.type_moving_window != "static"
            self.t2_forecast_date = self.t2_date_y		# Date of last h-step ahead forecast
        endif
        collected_point_fc_and_sderr[lwin] = set_xlist_and_forecast(&self)	# h by 2 matrix (point_fc ~ sderr)
    endloop

    if self.type_moving_window == "static"
        string self.t2_forecast_date = obslabel(obsnum(self.t2_train_date) + self.horizon)	# Date of last h-step ahead forecast
    endif

    return collected_point_fc_and_sderr
end function


# TODO: untested
# Public function
function list get_naive_forecasts (const bundle self,
                                   matrix horizons[null] "Select specific horizons (moving-window only)",
      const string suffix[null] "Suffix for series' names")
    /* Transform interval forecasts into a list of series and return this. */

    list R = null
    series y = self.y
    if !exists(suffix)
        string suffix = ""
    endif
    if !exists(horizons)
        matrix horizons = seq(1, self.horizon)
    endif
    matrix horizons = vec(horizons)

    scalar err = horizons_isok(self, horizons)
    if !err
        return R
    endif

    smpl obsnum(self.t1_forecast_date) obsnum(self.t2_forecast_date)	# don't drop


    return list_of_forecasts(self, horizons, suffix)
end function

# TODO: add convenient function "get_naive_forecast_errors()"


# untested
function void plot_naive_forecasts (const bundle self "Bundle returned from naiveFC()",
      const matrix horizons[null] "Select only specific horizons",
      const string model[null] "Select a model in case of avgfc")
    /* Function for plotting realizations and interval forecasts. */

    if self.which == "avgfc" && !exists(model)
        funcerr "You must specify for which model to plot the forecasts."
    endif
    series y = self.y
    setinfo y --graph-name="Actuals"
    # re-set missing values back to NA
    series y = (y == replace_nan_value_by() && self.type_moving_window == "static") \
      ? NA : y

    if !exists(horizons)
        matrix horizons = seq(1, self.horizon)
    endif

    list plotlist = y get_naive_forecasts(self, horizons)
    list plotlist = get_specific_model_for_avgfc(self, plotlist, model)

    # incl. some pre-forecast periods obs. for plotting
    scalar start = xmax(obsnum(self.t1_forecast_date) - self.pre_fc_periods_to_plot, \
      1)
    smpl start obsnum(self.t2_forecast_date)

    call_plot(plotlist, self)
end function


# untested
function list get_specific_model_for_avgfc (const bundle self,
                                            const list plotlist,
                                            string model)
    /* In case of "avgfc" we only plot the results for a specific model
    but not for all in a single plot. */

    if self.which == "avgfc"
        string model = tolower(model)
        list plotlist = get_model_forecasts_from_list(plotlist, model)
        if nelem(plotlist) == 0
            funcerr "Model requested is not supported."
        endif
    endif

    return plotlist
end function


# untested
function list get_model_forecasts_from_list (const list plotlist,
                                             const string model)
    /* Retrieve from list only those series which include
    model in its serie's name. */

    list new = null
    loop foreach i plotlist -q
        if instring(varname(plotlist.$i), sprintf("_%s", model))
            list new += $i
        endif
    endloop

    return new
end function

# untested
function void call_plot (const list plotlist,
                         const bundle self)
    /* */

    string filename = self.filename
    scalar ylo
    scalar yup
    yaxis_ranges(plotlist, &ylo, &yup)

    plot plotlist
        options with-lp time-series single-yaxis
        literal set linetype 1 lc rgb "black" lw 1 pt 0 ps 0
        literal set linetype 3 lc rgb "red" lw 1.5 ps 0
        literal set linetype 2 lc rgb "grey" lw 1.5 ps 0
        literal set linetype 4 lc rgb "grey" lw 1.5 ps 0
        literal set key left bottom below
        #literal set key inside left bottom
        #put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        literal set style line 11 lc rgb "#808080" lt 1
        literal set border 3 back ls 11			# get rid of upper + left border
        literal set tics nomirror
        #add a slight grid to make it easier to follow the exact position of the curves
        literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
        literal set grid back ls 12
        printf "set yrange[%g:%g]", ylo, yup
        printf "set ylabel \"%s\"", self.ylab
        printf "set xlabel \"%s\"", self.xlab
        printf "set title \"%s\"", self.title
    end plot --output="@filename"
end function


# FIXME
function matrix GUI_naiveFC (const series y "Dependent variable",
                             const list xlist[null] "Additional exogenous (future values must be known)",
      int which[1:11:1] "Model type" {"meanFC", "medianFC", "rwFC", "rwdriftFC", \
      "ar1FC", "ar1trendFC", "smeanFC", "smedianFC", "snaiveFC", "snaivedriftFC", "avgFC"},
      int h[1::10] "Forecast horizon",
      bool Plot[1] "Plot forecast")
    /* Helper function for GUI access. */

    # map integer value to string
    strings methods = get_supported_nonseas_methods()

    bundle opts = null
    bundle self = null
    opts.h = h
    opts.xlist = xlist
    self = naiveFC(y, methods[which], opts)

    # output
    printf "%12.4f\n", self.fc
    if Plot
        naivePlot(&self)
    endif

    return self.fc
end function


# TODO: untested
# Public (convinient) function
function matrix stack_moving_window_forecasts (const list FC "List of forecast; each series refers to specific horizon")
/* list FC includes fc_h1 fc_h2, fc_hN were N refers to the maximum forecast
   horizon. Stack h-period forecasts into a single vector.
    return: vector of stacked results. */

    matrix stacked_fc = {}
    if nelem(FC) == 0
        printf "\nError: List of forecastś is empty.\n"
        return stacked_fc
    endif

    scalar max_horizon = nelem(FC)
    smpl FC --no-all-missing

    # Date index refers to the 'date being forecasted' T+h
    # This means that the 'date of information' is h-period back in time,
    # and thus [= (T+h) - h]

    matrix date_of_informations = stack_info_dates($obsdate, max_horizon)
    matrix stacked_forecasts = stack_multiperiod_forecasts(FC)
    if rows(date_of_informations) != rows(stacked_forecasts)
        funcerr(sprintf("Dimensions do not fit:\n\
          rows(date_of_informations) = %d\n\
          rows(stacked_forecasts) = %d", \
          rows(date_of_informations), rows(stacked_forecasts)))
    endif

    return concat_mats_add_names_and_sort(date_of_informations, stacked_forecasts)
end function
