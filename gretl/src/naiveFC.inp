#FIXME: add a check that extra.gfn is >= v0.6

function bundle dict_models (void)
/* Dictionary including stuff for calling estimation
    command and fcast command. */

    bundle dict_models

    dict_models.meanfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "ols y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.medianfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "quantreg 0.5 y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.smeanfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "ols y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 1 \
      )
    dict_models.smedianfc = defbundle( \
      "forecast_arg", "--static", \
      "command", "quantreg 0.5 y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 1 \
      )
    dict_models.snaivefc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 0 0 ; 0 1 0 ; y xlist --nc", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.snaivedriftfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 0 0 ; 0 1 0 ; y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.rwfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 1 0 ; y xlist --nc", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 0, \
      "add_ohe_periods", 0 \
      )
    dict_models.rwdriftfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "arima 0 1 0 ; y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 0, \
      "add_intercept", 0, \
      "add_ohe_periods", 0 \
      )
    dict_models.ar1fc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "ols y xlist", \
      "add_linear_trend", 0, \
      "add_first_lag", 1, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )
    dict_models.ar1trendfc = defbundle( \
      "forecast_arg", "--dynamic", \
      "command", "ols y xlist", \
      "add_linear_trend", 1, \
      "add_first_lag", 1, \
      "add_intercept", 1, \
      "add_ohe_periods", 0 \
      )

    return dict_models
end function


function bundle default_values (const series y)
    /* Set default values */

    bundle self = null
    scalar self.error = 0
    list self.xlist = null
    scalar self.horizon = 10				# maximum forecast horizon
    scalar self.level = 0.9					# probability level for forecast interval
    scalar self.fan = 0						# plot fan chart  (not supported yet)
    scalar self.nboot = 0					# no. of bootstrap replications  (not supported yet)
    scalar self.blength = 4					# Block length bootstrap  (not supported yet)
    scalar self.is_seas = data_has_seasonality()
    strings self.supported_estimators = get_estimator_names(self.is_seas)
    scalar self.verbose = 1

    genr index
    series self.index = index

    string self.type_moving_window = "static" 			# "static", "rolling" or "recursive"
    scalar self.window_length = ceil(0.25 * nobs(y))	# default window length for moving-windows

    # For naivePlot()
    string self.title = ""
    string self.ylab = ""
    string self.xlab = ""
    string self.filename = "display"
    scalar self.pre_fc_periods_to_plot = int(0.25 * nobs(y))

    return self
end function



# TODO: untested
function list prepare_xlist (const bundle model_settings,
                             const bundle self)
    /* Prepare list of additional regressors. */

    list xlist = null

    if model_settings.add_ohe_periods
        xlist += add_ohe_periods_to_list()
    endif
    if model_settings.add_intercept
        xlist += add_intercept_to_list()
    endif
    if model_settings.add_linear_trend
        xlist += add_linear_trend_to_list()
    endif

    if inbundle(self, "xlist")
        xlist += self.xlist
    endif

    # TODO: check for duplicates in xlist

    return xlist
end function


# TODO: untested
function matrix set_xlist_and_forecast (bundle *self)
/* Set list of regressors, estimate model and compute
    point forecast and forecast standard errors. */

    bundle model_settings = dict_models()[self.active_model]
    string fcast_arg = model_settings.forecast_arg
    string command = model_settings.command
    # TODO: consider 3 verbose levels: silent, normal, detailed
    if self.verbose < 2
        command += " --quiet"	# estimation details only for detailed verbosity level
        fcast_arg += " --quiet"
    endif
    matrix forecast_results = zeros(self.horizon, 2) * NA
    series y = self.y					# length: window_length + horizon

    # "(train_obsnums.t2_obsnum - train_obsnums.t1_obsnum)"
    # is not the effective sample length but (window_length-max(lags))
    bundle train_obsnums = get_train_start_end_obsnums(self)
    bundle test_obsnums = get_test_start_end_obsnums(train_obsnums, self)
    
    list xlist = prepare_xlist(model_settings, self)
    if model_settings.add_first_lag
        xlist += y(-1)
    endif

    catch smpl train_obsnums.t1_obsnum train_obsnums.t2_obsnum

    if $error
        printError("Failed to set training sample. Check your sample and window size.")
        scalar self.error = 1
        return forecast_results
    endif

    # TODO: Can this happen, and if so why -- otherwise drop
    if self.type_moving_window != "static" && ($nobs > self.window_length)
        printError(sprintf("You training sample (T=%d) is longer than the\n\
          specified window length (T=%d).", $nobs, self.window_length))

        scalar self.error = 1
        return forecast_results
    endif

    self.error = estimate_model_and_forecast(command, fcast_arg, y, \
      xlist, train_obsnums, test_obsnums)

    forecast_results[1:self.horizon_current,] = $fcast ~ $fcse

    return forecast_results
end function


# TODO: put checks into separate functions
function void do_initial_checks (bundle *self)
    /* Helper function perfoming some initial checks */

    pkg query extra --quiet
    # FIXME: This fails 
    /*
    if atof($result.version) < 0.6
        printError("You need at least version 0.6 of the 'extra' package.")
        printError("Update by executing 'pkg install extra'")
    endif
    */

    strings methods = get_supported_nonseas_methods()
    strings seas_methods = get_supported_seas_methods()

    # Check whether called method exists
    if !nelem(strpos(methods, self.which)) && !nelem(strpos(seas_methods, self.which))
        printError("The forecasting method you selected does not exist.")
        self.error = 1
    endif

    if !self.is_seas && nelem(strpos(seas_methods, self.which))
        printError("The method you requested is not available for non-seasonal data.")
        self.error = 1
    endif

    if self.window_length < $pd
        printError("Periodicity cannot be negative.")
        printError(sprintf("Window size = %d", self.window_length))
        printError(sprintf("Periodicity = %d\n", $pd))
        printError("The size of the moving window cannot be smaller than the underlying periodicity.")
        self.error = 1
    endif

    if self.nboot
        print_no_bootstrap_support()
        self.error = 1
    endif
    
    if nelem(self.xlist) > 0 \
      && (self.which == "rwfc" || self.which == "rwdriftfc" || self.which == "snaivefc" || self.which == "snaivedriftfc")
        
        printError(sprintf("No exogenous variables can be included for the selected model '%s'.", self.which))
        self.error = 1
    endif
end function


# TODO: untested
function void t1_and_t2_of_y_and_xlist (const series y,
                                        bundle *self)
    /* Check valid start and end dates of y and xlist. */

    list xlist = self.xlist
    scalar t1_curr = $t1
    scalar t2_curr = $tmax
    bundle obsdetails_y
    bundle obsdetails_x

    obslabels_and_nobs_to_bundle(y, &obsdetails_y)
    string self.t1_date_y = obsdetails_y.t1_date
    string self.t2_date_y = obslabel(obsnum(obsdetails_y.t2_date) - self.n_sampleend_obs_replaced)	# replaced the last n missings by -999
    scalar self.t1_obsnum_y = obsnum(self.t1_date_y)
    scalar self.t2_obsnum_y = obsnum(self.t2_date_y)

    scalar t1_diff_y = self.t1_obsnum_y - t1_curr
    scalar t2_diff_y = t2_curr - self.t2_obsnum_y

    if t1_diff_y > 0
        printWarning(sprintf("Found %d missing initial observations for %s.", \
          t1_diff_y, self.name_endo))
    endif

    if nelem(xlist)
        obslabels_and_nobs_to_bundle(xlist, &obsdetails_x)
        scalar self.t1_obsnum_xlist = obsnum(obsdetails_x.t1_date)
        scalar self.t2_obsnum_xlist = obsnum(obsdetails_x.t2_date)
        string self.t1_date_xlist = obsdetails_x.t1_date
        string self.t2_date_xlist = obsdetails_x.t2_date
        scalar t1_diff_x = self.t1_obsnum_xlist - t1_curr
        scalar t2_diff_x = t2_curr - self.t2_obsnum_xlist

        if t1_diff_x > 0
            printWarning(sprintf("Found %d missing initial observations for exogenous.",\
              t1_diff_x))
        endif
        if t2_diff_x > 0
            printWarning(sprintf("Found %d missing observations at sample end for exogenous.",\
              t2_diff_x))
        endif
    endif
end function


function bundle naiveFC (const series y,
                         string which "Select forecasting method",
                         bundle opts[null] "Bundle incl. optional parameters")
    /* Main package function */

    if !exists(opts)
        bundle opts = null
    endif
    bundle self = set_bundle(y, which, opts)

    do_initial_checks(&self)	# TODO: return scalar capturing error!
    if self.error
        return self
    endif

    # Replace of missing at the sample end
    # must be done here before 't1_and_t2_of_y_and_xlist'
    self.n_sampleend_obs_replaced = repl_sampleend_missings_of_y(&y, self.verbose)

    t1_and_t2_of_y_and_xlist(y, &self)

    if self.type_moving_window == "static"
        # "self.t2_date_y" refers to in-sample end date of "y"
        scalar self.window_length = smplspan(self.t1_date_y, self.t2_date_y, $pd)
    endif

    scalar check = valid_dates_of_y_and_xlist(&self)
    if check
        printError("Problem with dating for y and/ or xlist.")
        return self
    endif

    scalar check = sufficient_future_obs(&self)
    if check
        return self
    endif

    smpl obsnum(self.t1_date_y) get_sample_end(self)		# get_sample_end(self) = in-sample end plus max(horizon)
    series self.y = y

    do_naive_forecasting(&self)

    if self.which == "avgfc"
        self.forecast_results.avgfc = compute_avgerage_forecast(&self)
    endif

    summarize_naive_fc_results(&self)
    cleanup_bundle(&self)

    return self
end function


function void cleanup_bundle (bundle *self)
    /* Delete some elements before returning to user. */

    delete self.fan
    delete self.blength
    delete self.nboot
    if inbundle(self,"obs_season")
        delete self.obs_season
    endif
    delete self.supported_estimators
    delete self.index
    delete self.active_model
    delete self.horizon_current
    delete self.t1_date_y
    delete self.t2_date_y
    delete self.xlist
end function


function bundle prepare_forecast_bundles (bundle *self)
/* Prepare for each estimator a dictionary for point
    interval forecast results to be stored in matrices. */

    bundle forecast_results

    loop i=1..nelem(self.models) -q
        string model = self.models[i]
        bundle forecast_results["@model"] = null
    endloop

    return forecast_results
end function


function void do_naive_forecasting (bundle *self)
    /* Wrapper function actually calling procedures. */

    strings models = getkeys(self.forecast_results)

    loop i=1..nelem(self.forecast_results) -q	# loop over models
        self.active_model = models[i]

        bundle interval_forecasts = execute_forecasting(&self)

        attach_row_labels(&interval_forecasts, self)
        attach_column_labels(&interval_forecasts, self)

        self.forecast_results[self.active_model] = interval_forecasts
    endloop
end function


function void summarize_naive_fc_results (bundle *self)
    /* Print summarising information */

    if self.verbose
        printf "-------------------------------------------------------------------\n"
        printf "\t\tSummary of naive forecasting\n"
        printf "\nForecasting method: \t\t\t%s\n", self.which
        printf "Endogenous: \t\t\t\t%s\n", self.name_endo
        printf "Number of additional regressors: \t%d\n", nelem(self.xlist)
        printf "In-Sample: \t\t\t\t%s to %s (T = %d)\n", self.t1_date_y, \
          self.t2_date_y, nobs(self.y) - self.horizon
        printf "Max. forecast horizon: \t\t\t%d\n", self.horizon
        if self.type_moving_window == "static"
            printf "Last in-sample observation: \t\t%s\n", self.t2_train_date
        elif self.type_moving_window == "rolling"
            printf "Moving window length: \t\t\t%d\n", self.window_length
        else
            printf "Initial window length: \t\t\t%d\n", self.window_length
        endif
        if self.type_moving_window != "static"
            printf "Number of '%s' multi-step forecasts: %d\n", self.type_moving_window, \
              self.n_folds
            printf "First observation forecasted: \t\t%s\n", self.t1_forecast_date
            printf "Last observation forecasted: \t\t%s\n", self.t2_forecast_date
        else
            printf "First observation forecasted (h=1): \t%s\n", self.t1_forecast_date
            printf "Last observation forecasted (h=%d): \t%s\n", self.horizon, \
              self.t2_forecast_date
        endif
        if self.type_moving_window == "static"
            printf "Width forecast interval: \t\t%d pct.\n", self.level * 100
        else
        endif
        printf "-------------------------------------------------------------------\n\n"
    endif
end function


function bundle execute_forecasting (bundle *self)
/* This function estimates the point forecasts either in (i) a rolling or
    (ii) a recursive manner and stores sequences of interval forecasts. */

    bundle cv = prep_and_get_cv_folds(self)
    self.n_folds = cv.n_folds

    # Loop over training sets, run estimation and retrieve interval forecasts.
    # returns an n_folds-dimensional array comprising h by 2 (point~sderr) matrices.
    matrices collected_point_fc_and_sderr = set_model_estimate_and_forecast(&cv, &self)

    bundle forecasts_and_factors = \
      point_fc_and_factor_as_arrays(collected_point_fc_and_sderr, &self)

    # Retrieve moving-window point_forecasts from array,
    # compute forecast intervals and put stuff to bundle
    return compute_intval_forecasts(forecasts_and_factors)
end function


# TODO: untested
function bundle compute_intval_forecasts (const bundle forecasts_and_factors)
/* Generate for each model based on respective point forecasts and
    estimated standard derrors, arrays holding interval forecasts. */

    bundle interval_forecasts

    matrix interval_forecasts.forecasts_point = \
      flatten(forecasts_and_factors.point_forecasts)	# rows: horizons, cols: sample period

    matrix factors_flattened = flatten(forecasts_and_factors.factors)

    matrix interval_forecasts.forecasts_lower_bound = \
      interval_forecasts.forecasts_point .- factors_flattened

    matrix interval_forecasts.forecasts_upper_bound = \
      interval_forecasts.forecasts_point .+ factors_flattened

    return interval_forecasts
end function



# TODO: untested
function matrices set_model_estimate_and_forecast (bundle *cv, bundle *self)
/* Loop over training sets, run estimation and retrieve
    interval forecasts. */

    matrices collected_point_fc_and_sderr = array(cv.n_folds)

    loop lwin=1..cv.n_folds -q
        matrix date_idx = cv.X_train[lwin]

        # time index of the training set = self.window_length + self.horizon
        # As the last rolling samples may inlude only a sample set less than self.horizon
        # observations, we still can compute forecasts for $Ttest < self.horizon
        scalar obs_left = $tmax - maxc(date_idx[,1])
        scalar self.horizon_current = xmin(self.horizon, obs_left)

        if self.horizon_current == 0		# FIXME: Why is n_folds=81 but only n_folds=80 would work!
            break
        endif

        smpl minc(date_idx[,1]) (maxc(date_idx[,1]) + self.horizon_current)

        if lwin == 1
            # CV series holds "window_length+horizon" observations: subtract "horizon"
            self.t1_train_date = obslabel($t1)
            string self.t2_train_date = obslabel($t2 - self.horizon_current)
            string self.t1_forecast_date = obslabel($t2 - self.horizon_current + 1)	# Date of 1st h=1 ahead forecast

        elif lwin == (cv.n_folds - 1) && self.type_moving_window != "static"
            self.t2_forecast_date = self.t2_date_y		# Date of last h-step ahead forecast
        endif
        collected_point_fc_and_sderr[lwin] = set_xlist_and_forecast(&self)	# h by 2 matrix (point_fc ~ sderr)
    endloop

    if self.type_moving_window == "static"
        string self.t2_forecast_date = obslabel(obsnum(self.t2_train_date) + self.horizon)	# Date of last h-step ahead forecast
    endif

    return collected_point_fc_and_sderr
end function


# TODO: untested
function scalar horizons_isok (const bundle self,
                               const matrix horizons)
    /* Check that vector horizons is ok. Relevant for
    get_naive_forecasts(). */

    if self.type_moving_window == "static" && self.verbose
        printInfo("You cannot select specific horizons for 'static' forecasts.")
        printInfo("Instead multi-step forecast values will be returned.")
    endif

    if self.type_moving_window != "static" && (maxc(horizons) > self.horizon)
        printError(sprintf("The maximum forecast horizon you \n\
          selected (%d) does exceed the horizon set before.", maxc(horizons)))
        return 1
    endif
    if minc(horizons) <= 0
        printError("You cannot select a negative forecast horizon.")
        return 1
    endif

    return 0
end function


# TODO: untested
# Public function
function list get_naive_forecasts (const bundle self,
                                   matrix horizons[null] "Select only specific horizons",
                                   const string suffix[null] "Suffix for series' names")
    /* Transform interval forecasts into a list of series and return this. */
    self
    stop

    list R = null
    series y = self.y
    strings models = getkeys(self.forecast_results)

    if !exists(suffix)
        string suffix = ""
    endif
    if exists(horizons)
        matrix horizons = vec(horizons)
    else
        matrix horizons = seq(1, self.horizon)'
    endif
    if horizons_isok(self, horizons)
        return R
    endif

    smpl obsnum(self.t1_forecast_date) obsnum(self.t2_forecast_date)	# don't drop

    loop i=1..nelem(models) -q
        if self.type_moving_window == "static"
            list R += get_static_forecast_list(self, models[i], suffix)
        else
            list R += get_movwindow_forecast_list(horizons, self, models[i], suffix)
        endif
    endloop

    return R
end function


function list get_movwindow_forecast_list (const matrix horizons,
                                           const bundle self,
                                           const string model,
                                           const string suffix)
    /* Return sascade of h-step forecast_results. For 'rolling'
    and 'recursive' cases. */

    list R = null

    loop i=1..rows(horizons) -q

        R += genseries(sprintf("low_h%d_%s%s", horizons[i], \
          model, suffix), \
          self.forecast_results[model].forecasts_lower_bound[i,]')

        R += genseries(sprintf("point_h%d_%s%s", horizons[i], \
          model, suffix), \
          self.forecast_results[model].forecasts_point[i,]')

        R += genseries(sprintf("up_h%d_%s%s", horizons[i], \
          model, suffix), \
          self.forecast_results[model].forecasts_upper_bound[i,]')
    endloop

    return R
end function


function list get_static_forecast_list (const bundle self,
                                        const string model,
                                        const string suffix)
    /* Return single multi-step forecast_results. For 'static'
    case. */

    list R = null

    R += genseries(sprintf("low_h1to%d_%s%s", self.horizon, \
      model, suffix), \
      self.forecast_results[model].forecasts_lower_bound)

    R += genseries(sprintf("point_h1to%d_%s%s", self.horizon, \
      model, suffix), \
      self.forecast_results[model].forecasts_point)

    R += genseries(sprintf("up_h1to%d_%s%s", self.horizon, \
      model, suffix), \
      self.forecast_results[model].forecasts_upper_bound)

    return R
end function




function void naivePlot (bundle *self "Bundle returned from naiveFC()",
      const matrix horizons[null] "Select only specific horizons")

    /* Function for plotting actual and forecast values over time. */

    string out = self.filename

    scalar pre_fc_periods_to_plot = inbundle(self, "pre_fc_periods_to_plot") ? \
      self.pre_fc_periods_to_plot : pre_fc_periods_to_plot

    if self.add_n_new_obs > 0
        dataset addobs self.add_n_new_obs
    endif

    series y = self.y
    setinfo y --graph-name="Actuals"
    if self.add_n_new_obs > 0				# The last h observations were added and set to zero
        # Note, eventual missings at the beginning of the data passed to naiveFC() aren't considered.
        smpl (obsnum(self.t2_date_y)+1) $tmax
        series y = NA
        smpl full
    endif

    list forecasts = y

    if exists(horizons)
        list forecasts += getNaiveForecastsList(&self, horizons)
    else
        list forecasts += getNaiveForecastsList(&self)
    endif
    if nelem(forecasts)
        printf "\nError: Received empty list from getNaiveForecastsList(). Stop.\n"
        stop
    endif

    /*
       if self.type_moving_window!="static"						# rolling/ recursive window
       scalar start = self.initfc - 1
       smpl start start
       # Loop over diff. training sets; each produces h-step ahead forecasts
       loop i=1..rows(self.fc) -q
       start++
       smpl start (start+self.horizon-1)
       series fc_$i = fcmat[i,]
       str = sprintf("TrainSet=%d", $i)
       setinfo fc_$i --graph-name="@str"
       lplot += fc_$i
       endloop

       elif self.type_moving_window=="static"
       self.initfc = self.T+1

       loop i=1..cols(self.fc) -q
       series fc_$i = fcmat[,i]

       if self.which=="avgFC"
       if i!=2
       str = sprintf("%s", self.method_names[i])
       setinfo fc_$i --graph-name="@str"
       endif
       else
       string meth = self.which
       setinfo fc_$i --graph-name="@meth"	#"Point-Fc"
       if cols(self.fc)==3
       if i==2
       string s = sprintf("%.1f", (1-self.level)/2*100 )
       setinfo fc_$i --graph-name="@s"
       elif i==3
       string s = sprintf("%.1f", (1-(1-self.level)/2)*100 )
       setinfo fc_$i --graph-name="@s"
       endif
       endif
       endif
       lplot += fc_$i
       if self.which=="avgFC" && i==2
       lplot -= fc_$i		# drop cross-sectional std. statistics
       endif
       endloop
       endif
    */

    # incl. some pre-forecast periods obs. for plotting
    smpl xmax((obsnum(self.t2_forecast_date) - pre_fc_periods_to_plot), 1) $tmax

    # y-range
    scalar mini = min(min(forecasts))
    scalar maxi = max(max(forecasts))
    scalar ylo = mini-0.05*abs(mini)
    scalar yup = maxi+0.05*abs(maxi)
    # TODO: lplot may become A VERY long list -- think about a restriction showing
    # only the k last forecasts

    /*
       if cols(self.fc) != 3
       plot lplot
       options with-lp time-series single-yaxis
       literal set linetype 1 lc rgb "black" lw 1 pt -1
       literal set linetype 2 lc rgb "red" lw 1.25 pt 2 ps 0.5
       literal set linetype 3 lc rgb "blue" lw 1#.25
       literal set linetype 4 lc rgb "black" lw 1#.25
       literal set linetype 5 lc rgb "grey" lw 1#.25
       literal set linetype 6 lc rgb "violet" lw 1#.25 #pt 3 ps 0.5
       literal set linetype 7 lc rgb "brown" lw 1#.25 #pt 4 ps 0.5
       literal set linetype 8 lc rgb "yellow" lw 1#.25 #pt 5 ps 0.5
       literal set linetype 9 lc rgb "red" lw 1#.25 #pt 1 ps 0.5
       literal set linetype 10 lc rgb "green" lw 1#.25
       literal set linetype 10 lc rgb "black" lw 1#.25
       literal set key left bottom below
       #literal set key inside left bottom
       #put the border more to the background by applying it
       # only on the left and bottom part and put it and the tics in gray
       literal set style line 11 lc rgb "#808080" lt 1
       literal set border 3 back ls 11			# get rid of upper + left border
       literal set tics nomirror
       #add a slight grid to make it easier to follow the exact position of the curves
       literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
       literal set grid back ls 12
       printf "set yrange[%g:%g]", ylo, yup
       printf "set ylabel \"%s\"", self.ylab
       printf "set xlabel \"%s\"", self.xlab
       printf "set title \"%s\"", self.title
       end plot --output="@out"

       else
    */
    plot forecasts
        options with-lp time-series single-yaxis
        literal set linetype 1 lc rgb "black" lw 1.5 pt 7 ps 1
        literal set linetype 2 lc rgb "red" lw 1.5 ps 0
        literal set linetype 3 lc rgb "blue" lw 1.5 ps 0
        literal set linetype 4 lc rgb "blue" lw 1.5 ps 0
        literal set key left bottom below
        #literal set key inside left bottom
        #put the border more to the background by applying it
        # only on the left and bottom part and put it and the tics in gray
        literal set style line 11 lc rgb "#808080" lt 1
        literal set border 3 back ls 11			# get rid of upper + left border
        literal set tics nomirror
        #add a slight grid to make it easier to follow the exact position of the curves
        literal set style line 12 lc rgb "#808080" lt 0 lw 1	# light grey color
        literal set grid back ls 12
        printf "set yrange[%g:%g]", ylo, yup
        printf "set ylabel \"%s\"", self.ylab
        printf "set xlabel \"%s\"", self.xlab
        printf "set title \"%s\"", self.title
    end plot --output="@out"
    #    endif
end function


function matrix GUI_naiveFC (const series y "Dependent variable",
                             const list xlist[null] "Additional exogenous (future values must be known)",
      int which[1:11:1] "Model type" {"meanFC", "medianFC", "rwFC", "rwdriftFC", \
      "ar1FC", "ar1trendFC", "smeanFC", "smedianFC", "snaiveFC", "snaivedriftFC", "avgFC"},
      int h[1::10] "Forecast horizon",
      bool Plot[1] "Plot forecast")
    /* Helper function for GUI access. */

    # map integer value to string
    strings methods = get_supported_nonseas_methods()

    bundle opts = null
    bundle self = null
    opts.h = h
    opts.xlist = xlist
    self = naiveFC(y, methods[which], opts)

    # output
    printf "%12.4f\n", self.fc
    if Plot
        naivePlot(&self)
    endif

    return self.fc
end function


