set verbose off
clear

# set paths and load inp-file
string wd = "/home/at/git/naiveFC"
string dat = "@wd/data"
include "@wd/gretl/naiveFC.inp"


# Select a dataset
#=================
# beer (quarterly)
# fep (annual)
# lomp (7d-daily)
# nysewk (weekly)
# intrates (monthly)

string sel_ds = "fep"
open @dat/@sel_ds.csv --quiet

# set forecast horizon
scalar h = 11

# check whether current frequency has season
catch series is_seas = $obsminor
scalar isseas = (exists(is_seas)) ? 1 : 0

# Generate periodic dummies
if isseas
    genr dummy
    list D = dq*
else
    list D = null
endif

# augment ds
dataset addobs h
smpl ; -h		# restrict back


# MEANFC
xmean = meanf(x, h)
#xmean
fcplot(x, xmean, "Mean Forecast", "nice ylabel", "nice xlabel")

# MEANFC but use median
xmedian = meanf(x, h)
xmedian
#fcplot(x, xmedian, "Median Forecast")

# SMEANF
if isseas
    smean = smeanf(x, h)
    smean
    eval aggregate(x,D,median)
    #fcplot(x, smean, "Seasonal Mean Forecast")
endif

# SMEANF but use median:
if isseas
    smedian = smeanf(x, h, 1)
    smedian
    eval aggregate(x,D,median)
    #fcplot(x, smedian, "Seasonal Median Forecast")
endif

# SNAIVE:
if isseas
    snaiv = snaive(x, h)
    snaiv
    #fcplot(x, snaiv, "Naive Seasonal Forecast")
endif

# RW wo drift
rw = rwf(x, h)
rw
#fcplot(x, rw, "Random-Walk Forecast")

# RW with drift
rwd = rwf(x, h, 1)
rwd
#fcplot(x, rwd, "Random-Walk + Drift Forecast")

# AR(1)
ar_1 = ar1f(x, h)
ar_1
#fcplot(x, ar_1, "AR(1) Forecast")
# compare with ar(1) by hand
ols x 0 x(-1)
fcast --dynamic --out-of-sample

# AR(1) + Trend
artrend_1 = ar1f(x, h, 1)

# Average of Forecasts
avg_fc = avgfc(x, h)
printf "%9.3f", avg_fc		# 1st col: point forecast, 2nd col: std. deviation
fcplot(x, avg_fc[,1], "Avg. of Forecasts")



#-------------------------------------
# NaiveTsCv
# Conduct rolling-sample naiveFC()
#-------------------------------------
bundle b = null
b.y = x
b.h = 4					# max. horizon
b.wsize = 33			# window size
string which = "meanf"	# choose a method
# R U N
NaiveThroughTime(&b, which)
matrix FC = b.FC		# grab matrix of forecasts; rows: period forecasted, cols: fc-horizon
print FC
nttplot(&b)				# Plot

/* Optional
   # Generate series out of forecast vectors and plot results
   smpl x --no-missing --replace
   smpl b.initfc ;
   list L = x
   loop i=1..b.h -q
   series FC_@which_h$i = FC[,i]
   setinfo FC_@which_h$i --description="@which $i-step ahead FC"
   L += FC_@which_h$i
   endloop
   gnuplot L --with-lines --time-series --output=display
*/

